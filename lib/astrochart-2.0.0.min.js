/*! astrochart v2.0.0 */
!(function (a) {
  (a.SYMBOL_SCALE = 1),
    (a.COLOR_BACKGROUND = "#fff"),
    (a.POINTS_COLOR = "#000"),
    (a.POINTS_TEXT_SIZE = 8),
    (a.POINTS_STROKE = 1.8),
    (a.SIGNS_COLOR = "#000"),
    (a.SIGNS_STROKE = 1.5),
    (a.MARGIN = 50),
    (a.PADDING = 18),
    (a.ID_CHART = "astrology"),
    (a.ID_RADIX = "radix"),
    (a.ID_TRANSIT = "transit"),
    (a.ID_ASPECTS = "aspects"),
    (a.ID_POINTS = "planets"),
    (a.ID_SIGNS = "signs"),
    (a.ID_CIRCLES = "circles"),
    (a.ID_AXIS = "axis"),
    (a.ID_CUSPS = "cusps"),
    (a.ID_RULER = "ruler"),
    (a.ID_BG = "bg"),
    (a.CIRCLE_COLOR = "#333"),
    (a.CIRCLE_STRONG = 2),
    (a.LINE_COLOR = "#333"),
    (a.INDOOR_CIRCLE_RADIUS_RATIO = 2),
    (a.INNER_CIRCLE_RADIUS_RATIO = 8),
    (a.RULER_RADIUS = 4),
    (a.SYMBOL_SUN = "Sun"),
    (a.SYMBOL_MOON = "Moon"),
    (a.SYMBOL_MERCURY = "Mercury"),
    (a.SYMBOL_VENUS = "Venus"),
    (a.SYMBOL_MARS = "Mars"),
    (a.SYMBOL_JUPITER = "Jupiter"),
    (a.SYMBOL_SATURN = "Saturn"),
    (a.SYMBOL_URANUS = "Uranus"),
    (a.SYMBOL_NEPTUNE = "Neptune"),
    (a.SYMBOL_PLUTO = "Pluto"),
    (a.SYMBOL_CHIRON = "Chiron"),
    (a.SYMBOL_LILITH = "Lilith"),
    (a.SYMBOL_NNODE = "NNode"),
    (a.SYMBOL_AS = "As"),
    (a.SYMBOL_DS = "Ds"),
    (a.SYMBOL_MC = "Mc"),
    (a.SYMBOL_IC = "Ic"),
    (a.SYMBOL_AXIS_FONT_COLOR = "#333"),
    (a.SYMBOL_AXIS_STROKE = 1.6),
    (a.SYMBOL_CUSP_1 = "1"),
    (a.SYMBOL_CUSP_2 = "2"),
    (a.SYMBOL_CUSP_3 = "3"),
    (a.SYMBOL_CUSP_4 = "4"),
    (a.SYMBOL_CUSP_5 = "5"),
    (a.SYMBOL_CUSP_6 = "6"),
    (a.SYMBOL_CUSP_7 = "7"),
    (a.SYMBOL_CUSP_8 = "8"),
    (a.SYMBOL_CUSP_9 = "9"),
    (a.SYMBOL_CUSP_10 = "10"),
    (a.SYMBOL_CUSP_11 = "11"),
    (a.SYMBOL_CUSP_12 = "12"),
    (a.CUSPS_STROKE = 1),
    (a.CUSPS_FONT_COLOR = "#000"),
    (a.SYMBOL_ARIES = "Aries"),
    (a.SYMBOL_TAURUS = "Taurus"),
    (a.SYMBOL_GEMINI = "Gemini"),
    (a.SYMBOL_CANCER = "Cancer"),
    (a.SYMBOL_LEO = "Leo"),
    (a.SYMBOL_VIRGO = "Virgo"),
    (a.SYMBOL_LIBRA = "Libra"),
    (a.SYMBOL_SCORPIO = "Scorpio"),
    (a.SYMBOL_SAGITTARIUS = "Sagittarius"),
    (a.SYMBOL_CAPRICORN = "Capricorn"),
    (a.SYMBOL_AQUARIUS = "Aquarius"),
    (a.SYMBOL_PISCES = "Pisces"),
    (a.SYMBOL_SIGNS = [
      a.SYMBOL_ARIES,
      a.SYMBOL_TAURUS,
      a.SYMBOL_GEMINI,
      a.SYMBOL_CANCER,
      a.SYMBOL_LEO,
      a.SYMBOL_VIRGO,
      a.SYMBOL_LIBRA,
      a.SYMBOL_SCORPIO,
      a.SYMBOL_SAGITTARIUS,
      a.SYMBOL_CAPRICORN,
      a.SYMBOL_AQUARIUS,
      a.SYMBOL_PISCES,
    ]),
    (a.COLOR_ARIES = "#FF4500"),
    (a.COLOR_TAURUS = "#8B4513"),
    (a.COLOR_GEMINI = "#87CEEB"),
    (a.COLOR_CANCER = "#27AE60"),
    (a.COLOR_LEO = "#FF4500"),
    (a.COLOR_VIRGO = "#8B4513"),
    (a.COLOR_LIBRA = "#87CEEB"),
    (a.COLOR_SCORPIO = "#27AE60"),
    (a.COLOR_SAGITTARIUS = "#FF4500"),
    (a.COLOR_CAPRICORN = "#8B4513"),
    (a.COLOR_AQUARIUS = "#87CEEB"),
    (a.COLOR_PISCES = "#27AE60"),
    (a.COLORS_SIGNS = [
      a.COLOR_ARIES,
      a.COLOR_TAURUS,
      a.COLOR_GEMINI,
      a.COLOR_CANCER,
      a.COLOR_LEO,
      a.COLOR_VIRGO,
      a.COLOR_LIBRA,
      a.COLOR_SCORPIO,
      a.COLOR_SAGITTARIUS,
      a.COLOR_CAPRICORN,
      a.COLOR_AQUARIUS,
      a.COLOR_PISCES,
    ]),
    (a.SHIFT_IN_DEGREES = 180),
    (a.STROKE_ONLY = !1),
    (a.COLLISION_RADIUS = 10),
    (a.ASPECTS = {
      conjunction: { degree: 0, orbit: 10, color: "transparent" },
      square: { degree: 90, orbit: 8, color: "#FF4500" },
      trine: { degree: 120, orbit: 8, color: "#27AE60" },
      opposition: { degree: 180, orbit: 10, color: "#27AE60" },
    }),
    (a.DIGNITIES_RULERSHIP = "r"),
    (a.DIGNITIES_DETRIMENT = "d"),
    (a.DIGNITIES_EXALTATION = "e"),
    (a.DIGNITIES_EXACT_EXALTATION = "E"),
    (a.DIGNITIES_FALL = "f"),
    (a.DIGNITIES_EXACT_EXALTATION_DEFAULT = [
      { name: "Sun", position: 19, orbit: 2 },
      { name: "Moon", position: 33, orbit: 2 },
      { name: "Mercury", position: 155, orbit: 2 },
      { name: "Venus", position: 357, orbit: 2 },
      { name: "Mars", position: 298, orbit: 2 },
      { name: "Jupiter", position: 105, orbit: 2 },
      { name: "Saturn", position: 201, orbit: 2 },
      { name: "NNode", position: 63, orbit: 2 },
    ]),
    (a.ANIMATION_CUSPS_ROTATION_SPEED = 2),
    (a.DEBUG = !1);
})((window.astrology = window.astrology || {})),
  (function (a) {
    function b(b) {
      return a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_SIGNS + "-" + b;
    }
    function c(b) {
      return a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_CUSPS + "-" + b;
    }
    function d(b, c) {
      var d = -1,
        e = -8;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " -2.18182,0.727268 -2.181819,1.454543 -1.454552,2.18182 -0.727268,2.181819 0,2.181819 0.727268,2.181819 1.454552,2.18182 2.181819,1.454544 2.18182,0.727276 2.18181,0 2.18182,-0.727276 2.181819,-1.454544 1.454552,-2.18182 0.727268,-2.181819 0,-2.181819 -0.727268,-2.181819 -1.454552,-2.18182 -2.181819,-1.454543 -2.18182,-0.727268 -2.18181,0 m 0.727267,6.54545 -0.727267,0.727276 0,0.727275 0.727267,0.727268 0.727276,0 0.727267,-0.727268 0,-0.727275 -0.727267,-0.727276 -0.727276,0 m 0,0.727276 0,0.727275 0.727276,0 0,-0.727275 -0.727276,0"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function e(b, c) {
      var d = -2,
        e = -7;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " a 7.4969283,7.4969283 0 0 1 0,14.327462 7.4969283,7.4969283 0 1 0 0,-14.327462 z"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function f(b, c) {
      var d = -2,
        e = 7;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      g.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          c +
          " 4.26011,0 m -2.13005,-2.98207 0,5.11213 m 4.70312,-9.7983 a 4.70315,4.70315 0 0 1 -4.70315,4.70314 4.70315,4.70315 0 0 1 -4.70314,-4.70314 4.70315,4.70315 0 0 1 4.70314,-4.70315 4.70315,4.70315 0 0 1 4.70315,4.70315 z"
      ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g);
      var h = 6,
        i = -16,
        j = document.createElementNS(S.root.namespaceURI, "path");
      return (
        j.setAttribute(
          "d",
          "m" +
            (b + h) +
            ", " +
            (c + i) +
            " a 3.9717855,3.9717855 0 0 1 -3.95541,3.59054 3.9717855,3.9717855 0 0 1 -3.95185,-3.59445"
        ),
        j.setAttribute("stroke", a.POINTS_COLOR),
        j.setAttribute("stroke-width", a.POINTS_STROKE),
        j.setAttribute("fill", "none"),
        f.appendChild(j),
        f
      );
    }
    function g(b, c) {
      var d = 2,
        e = 7;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " -4.937669,0.03973 m 2.448972,2.364607 0,-5.79014 c -3.109546,-0.0085 -5.624617,-2.534212 -5.620187,-5.64208 0.0044,-3.107706 2.526514,-5.621689 5.635582,-5.621689 3.109068,0 5.631152,2.513983 5.635582,5.621689 0.0044,3.107868 -2.510641,5.633586 -5.620187,5.64208"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function h(b, c) {
      var d = 2,
        e = -2;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " c -5.247438,-4.150623 -11.6993,3.205518 -7.018807,7.886007 4.680494,4.680488 12.036628,-1.771382 7.885999,-7.018816 z m 0,0 0.433597,0.433595 3.996566,-4.217419 m -3.239802,-0.05521 3.295015,0 0.110427,3.681507"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function i(b, c) {
      var d = -5,
        e = -2;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " c -0.43473,0 -1.30422,-0.40572 -1.30422,-2.02857 0,-1.62285 1.73897,-3.2457 3.47792,-3.2457 1.73897,0 3.47792,1.21715 3.47792,4.05713 0,2.83999 -2.1737,7.30283 -6.52108,7.30283 m 12.17269,0 -12.60745,0 m 9.99902,-11.76567 0,15.82279"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function j(b, c) {
      var d = 5,
        e = 10;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " c -0.52222,0.52221 -1.04445,1.04444 -1.56666,1.04444 -0.52222,0 -1.56667,-0.52223 -1.56667,-1.56667 0,-1.04443 0.52223,-2.08887 1.56667,-3.13332 1.04444,-1.04443 2.08888,-3.13331 2.08888,-5.22219 0,-2.08888 -1.04444,-4.17776 -3.13332,-4.17776 -1.97566,0 -3.65555,1.04444 -4.69998,3.13333 m -2.55515,-5.87499 6.26664,0 m -3.71149,-2.48054 0,15.14438"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function k(b, c) {
      var d = -5,
        e = -7;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      g.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          c +
          "  0,10.23824 m 10.23633,-10.32764 0,10.23824 m -10.26606,-4.6394 10.23085,0 m -5.06415,-5.51532 0,11.94985"
      ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g);
      var h = 7,
        i = 14.5,
        j = document.createElementNS(S.root.namespaceURI, "path");
      return (
        j.setAttribute(
          "d",
          "m" +
            (b + h) +
            ", " +
            (c + i) +
            " a 1.8384377,1.8384377 0 0 1 -1.83844,1.83843 1.8384377,1.8384377 0 0 1 -1.83842,-1.83843 1.8384377,1.8384377 0 0 1 1.83842,-1.83844 1.8384377,1.8384377 0 0 1 1.83844,1.83844 z"
        ),
        j.setAttribute("stroke", a.POINTS_COLOR),
        j.setAttribute("stroke-width", a.POINTS_STROKE),
        j.setAttribute("fill", "none"),
        f.appendChild(j),
        f
      );
    }
    function l(b, c) {
      var d = 3,
        e = -5;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " 1.77059,-2.36312 2.31872,1.8045 m -14.44264,-0.20006 2.34113,-1.77418 1.74085,2.38595 m -1.80013,-1.77265 c -1.23776,8.40975 0.82518,9.67121 4.95106,9.67121 4.12589,0 6.18883,-1.26146 4.95107,-9.67121 m -7.05334,3.17005 2.03997,-2.12559 2.08565,2.07903 m -5.32406,9.91162 6.60142,0 m -3.30071,-12.19414 0,15.55803"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function m(b, c) {
      var d = 5,
        e = -5;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      g.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          c +
          " a 5.7676856,5.7676856 0 0 1 -2.88385,4.99496 5.7676856,5.7676856 0 0 1 -5.76768,0 5.7676856,5.7676856 0 0 1 -2.88385,-4.99496 m 5.76771,13.93858 0,-8.17088 m -3.84512,4.32576 7.69024,0"
      ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g);
      var h = -2.3,
        i = 0,
        j = document.createElementNS(S.root.namespaceURI, "path");
      return (
        j.setAttribute(
          "d",
          "m" +
            (b + h) +
            ", " +
            (c + i) +
            " a 3.3644834,3.3644834 0 0 1 -3.36448,3.36449 3.3644834,3.3644834 0 0 1 -3.36448,-3.36449 3.3644834,3.3644834 0 0 1 3.36448,-3.36448 3.3644834,3.3644834 0 0 1 3.36448,3.36448 z"
        ),
        j.setAttribute("stroke", a.POINTS_COLOR),
        j.setAttribute("stroke-width", a.POINTS_STROKE),
        j.setAttribute("fill", "none"),
        f.appendChild(j),
        f
      );
    }
    function n(b, c) {
      var d = 3,
        e = 5;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      g.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          c +
          " a 3.8764725,3.0675249 0 0 1 -3.876473,3.067525 3.8764725,3.0675249 0 0 1 -3.876472,-3.067525 3.8764725,3.0675249 0 0 1 3.876472,-3.067525 3.8764725,3.0675249 0 0 1 3.876473,3.067525 z"
      ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g);
      var h = 0,
        i = -13,
        j = document.createElementNS(S.root.namespaceURI, "path");
      return (
        j.setAttribute(
          "d",
          "m" +
            (b + h) +
            ", " +
            (c + i) +
            "   -3.942997,4.243844 4.110849,3.656151 m -4.867569,-9.009468 0,11.727251"
        ),
        j.setAttribute("stroke", a.POINTS_COLOR),
        j.setAttribute("stroke-width", a.POINTS_STROKE),
        j.setAttribute("fill", "none"),
        f.appendChild(j),
        f
      );
    }
    function o(b, c) {
      var d = 2,
        e = 4;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " -2.525435,-1.12853 -1.464752,-1.79539 -0.808138,-2.20576 0.151526,-2.05188 0.909156,-1.5389 1.010173,-1.02593 0.909157,-0.56427 1.363735,-0.61556 m 2.315327,-0.39055 -1.716301,0.54716 -1.7163,1.09431 -1.1442,1.64146 -0.572102,1.64146 0,1.64146 0.572102,1.64147 1.1442,1.64145 1.7163,1.09432 1.716301,0.54715 m 0,-11.49024 -2.2884,0 -2.288401,0.54716 -1.716302,1.09431 -1.144201,1.64146 -0.5721,1.64146 0,1.64146 0.5721,1.64147 1.144201,1.64145 1.716302,1.09432 2.288401,0.54715 2.2884,0 m -4.36712,-0.4752 0,6.44307 m -2.709107,-3.41101 5.616025,0"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function p(b, c) {
      var d = -2,
        e = 3;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            c +
            " -1.3333334,-0.6666667 -0.6666666,0 -1.3333334,0.6666667 -0.6666667,1.3333333 0,0.6666667 0.6666667,1.3333333 1.3333334,0.6666667 0.6666666,0 1.3333334,-0.6666667 0.6666666,-1.3333333 0,-0.6666667 -0.6666666,-1.3333333 -2,-2.66666665 -0.6666667,-1.99999995 0,-1.3333334 0.6666667,-2 1.3333333,-1.3333333 2,-0.6666667 2.6666666,0 2,0.6666667 1.3333333,1.3333333 0.6666667,2 0,1.3333334 -0.6666667,1.99999995 -2,2.66666665 -0.6666666,1.3333333 0,0.6666667 0.6666666,1.3333333 1.3333334,0.6666667 0.6666666,0 1.3333334,-0.6666667 0.6666667,-1.3333333 0,-0.6666667 -0.6666667,-1.3333333 -1.3333334,-0.6666667 -0.6666666,0 -1.3333334,0.6666667 m -7.9999999,-6 0.6666667,-1.3333333 1.3333333,-1.3333333 2,-0.6666667 2.6666666,0 2,0.6666667 1.3333333,1.3333333 0.6666667,1.3333333"
        ),
        g.setAttribute("stroke", a.POINTS_COLOR),
        g.setAttribute("stroke-width", a.POINTS_STROKE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function q(c, d) {
      var e = -9,
        f = -2;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_ARIES)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " -0.9,-0.9 0,-1.8 0.9,-1.8 1.8,-0.8999998 1.8,0 1.8,0.8999998 0.9,0.9 0.9,1.8 0.9,4.5 m -9,-5.4 1.8,-1.8 1.8,0 1.8,0.9 0.9,0.9 0.9,1.8 0.9,3.6 0,9.9 m 8.1,-12.6 0.9,-0.9 0,-1.8 -0.9,-1.8 -1.8,-0.8999998 -1.8,0 -1.8,0.8999998 -0.9,0.9 -0.9,1.8 -0.9,4.5 m 9,-5.4 -1.8,-1.8 -1.8,0 -1.8,0.9 -0.9,0.9 -0.9,1.8 -0.9,3.6 0,9.9"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function r(c, d) {
      var e = -9,
        f = -11;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_TAURUS)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 1,4 1,2 2,2 3,1 4,0 3,-1 2,-2 1,-2 1,-4 m -18,0 1,3 1,2 2,2 3,1 4,0 3,-1 2,-2 1,-2 1,-3 m -11,8 -2,1 -1,1 -1,2 0,3 1,2 2,2 2,1 2,0 2,-1 2,-2 1,-2 0,-3 -1,-2 -1,-1 -2,-1 m -4,1 -2,1 -1,2 0,3 1,3 m 8,0 1,-3 0,-3 -1,-2 -2,-1"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function s(c, d) {
      var e = -6,
        f = -6;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_GEMINI)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 0,11.546414 m 0.9622011,-10.5842129 0,9.6220117 m 7.6976097,-9.6220117 0,9.6220117 m 0.962201,-10.5842128 0,11.546414 m -13.4708165,-14.4330172 1.9244023,1.924402 1.9244024,0.9622012 2.8866038,0.9622011 3.848804,0 2.886604,-0.9622011 1.924402,-0.9622012 1.924403,-1.924402 m -17.3196215,17.3196207 1.9244023,-1.9244024 1.9244024,-0.9622011 2.8866038,-0.9622012 3.848804,0 2.886604,0.9622012 1.924402,0.9622011 1.924403,1.9244024"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function t(c, d) {
      var e = 9,
        f = -9;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_CANCER)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " -15,0 -2,1 -1,2 0,2 1,2 2,1 2,0 2,-1 1,-2 0,-2 -1,-2 11,0 m -18,3 1,2 1,1 2,1 m 4,-4 -1,-2 -1,-1 -2,-1 m -4,15 15,0 2,-1 1,-2 0,-2 -1,-2 -2,-1 -2,0 -2,1 -1,2 0,2 1,2 -11,0 m 18,-3 -1,-2 -1,-1 -2,-1 m -4,4 1,2 1,1 2,1"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function u(c, d) {
      var e = -3,
        f = 4;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_LEO)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " -2,-1 -1,0 -2,1 -1,2 0,1 1,2 2,1 1,0 2,-1 1,-2 0,-1 -1,-2 -5,-5 -1,-2 0,-3 1,-2 2,-1 3,-1 4,0 4,1 2,2 1,2 0,3 -1,3 -3,3 -1,2 0,2 1,2 2,0 1,-1 1,-2 m -13,-5 -2,-3 -1,-2 0,-3 1,-2 1,-1 m 7,-1 3,1 2,2 1,2 0,3 -1,3 -2,3"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function v(c, d) {
      var e = -9,
        f = -5;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_VIRGO)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 2.5894868,-2.5894868 1.7263245,2.5894868 0,9.4947847 m -2.5894868,-11.2211092 1.7263245,2.5894867 0,8.6316225 m 0.8631623,-9.4947847 2.5894867,-2.5894868 1.72632451,2.5894868 0,8.6316224 m -2.58948671,-10.3579469 1.72632447,2.5894867 0,7.7684602 m 0.86316224,-8.6316224 2.58948679,-2.5894868 1.7263244,2.5894868 0,13.8105959 m -2.5894867,-15.5369204 1.7263245,2.5894867 0,12.9474337 m 0.8631622,-13.8105959 2.5894868,-2.5894868 0.8631622,1.7263245 0.8631623,2.5894868 0,2.5894867 -0.8631623,2.58948673 -0.8631622,1.72632447 -1.7263245,1.7263245 -2.5894867,1.7263245 -4.3158113,1.7263245 m 7.7684602,-15.5369204 0.8631623,0.8631622 0.8631622,2.5894868 0,2.5894867 -0.8631622,2.58948673 -0.8631623,1.72632447 -1.7263245,1.7263245 -2.5894867,1.7263245 -3.452649,1.7263245"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function w(c, d) {
      var e = -2,
        f = -8;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_LIBRA)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " c 0.7519,1e-5 1.3924,0.12227 1.9316,0.35156 0.6619,0.28495 1.2134,0.63854 1.666,1.0625 0.4838,0.45481 0.853,0.97255 1.1172,1.56641 0.2467,0.56612 0.3711,1.17397 0.3711,1.83789 0,0.64113 -0.1244,1.23948 -0.373,1.80859 -0.1624,0.36305 -0.3631,0.69725 -0.6055,1.00586 l -0.6367,0.8086 4.3789,0 0,0.67187 -5.4024,0 0,-0.91797 c 0.2173,-0.1385 0.4379,-0.27244 0.6367,-0.44726 0.4215,-0.36876 0.7529,-0.82784 0.9883,-1.35547 0.2215,-0.50074 0.334,-1.0358 0.334,-1.58594 0,-0.55653 -0.1122,-1.09434 -0.334,-1.5957 l -0,-0.002 0,-0.004 c -0.2292,-0.49901 -0.5581,-0.94778 -0.9746,-1.33789 l -0,-0.002 -0,-0.002 c -0.3967,-0.36155 -0.8679,-0.65723 -1.4062,-0.88476 l -0,0 c -0.4984,-0.20903 -1.0622,-0.30663 -1.6817,-0.30664 -0.5926,1e-5 -1.1526,0.10008 -1.6699,0.30273 l -0,0 c -0.5261,0.20799 -1.0032,0.5067 -1.4199,0.88867 l -0,0.002 -0,0.002 c -0.4166,0.39011 -0.7454,0.83887 -0.9746,1.33789 l 0,0.004 -0,0.002 c -0.2218,0.50136 -0.334,1.03915 -0.334,1.5957 0,0.55015 0.1125,1.08519 0.334,1.58594 l 0,0.002 0,0.004 c 0.229,0.49855 0.5574,0.94911 0.9746,1.33984 0.1876,0.17482 0.4143,0.31484 0.6367,0.45703 l 0,0.91797 -5.3906,0 0,-0.67187 4.3789,0 -0.6367,-0.8086 c -0.2428,-0.30904 -0.443,-0.64418 -0.6055,-1.00781 -0.2487,-0.56911 -0.3731,-1.16552 -0.3731,-1.80664 0,-0.66391 0.1244,-1.27178 0.3711,-1.83789 l 0,-0.002 c 3e-4,-5.8e-4 -2e-4,-10e-4 0,-0.002 0.2641,-0.59218 0.6326,-1.10871 1.1153,-1.5625 0.4847,-0.45571 1.0332,-0.80585 1.6562,-1.05859 0.5861,-0.23488 1.2294,-0.35546 1.9414,-0.35547 z m -7.8496,13.45899 15.6992,0 0,0.67187 -15.6992,0 z"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function x(c, d) {
      var e = -9,
        f = -4;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_SCORPIO)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 2.3781101,-2.3781101 2.3781101,2.3781101 0,9.5124404 m -3.1708135,-11.0978471 2.3781101,2.3781101 0,8.719737 m 0.7927034,-9.5124404 2.3781101,-2.3781101 2.37811007,2.3781101 0,9.5124404 m -3.17081347,-11.0978471 2.3781101,2.3781101 0,8.719737 m 0.79270337,-9.5124404 2.37811013,-2.3781101 2.3781101,2.3781101 0,8.719737 1.5854067,1.5854068 m -4.7562202,-11.8905505 2.3781101,2.3781101 0,8.719737 1.5854067,1.5854067 2.3781101,-2.3781101"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function y(c, d) {
      var e = 7,
        f = -9;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_SAGITTARIUS)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " -17.11444,17.11444 m 17.11444,-17.11444 -3.2089575,1.0696525 -6.417915,0 m 7.4875675,1.0696525 -3.2089575,0 -4.27861,-1.0696525 m 9.6268725,-1.0696525 -1.0696525,3.2089575 0,6.41791504 m -1.0696525,-7.48756754 0,3.2089575 1.0696525,4.27861004 m -8.55722,0 -7.4875675,0 m 6.417915,1.06965246 -3.2089575,0 -3.2089575,-1.06965246 m 7.4875675,0 0,7.48756746 m -1.0696525,-6.417915 0,3.2089575 1.0696525,3.2089575"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function z(c, d) {
      var e = -9,
        f = -3;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_CAPRICORN)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 1.8047633,-3.6095267 4.5119084,9.0238168 m -4.5119084,-7.2190534 4.5119084,9.0238167 2.707145,-6.3166717 4.5119084,0 2.707145,-0.9023817 0.9023817,-1.8047633 0,-1.8047634 -0.9023817,-1.8047633 -1.8047634,-0.9023817 -0.9023816,0 -1.8047634,0.9023817 -0.9023817,1.8047633 0,1.8047634 0.9023817,2.707145 0.9023817,1.80476336 0.9023817,2.70714504 0,2.707145 -1.8047634,1.8047633 m 1.8047634,-16.2428701 -0.9023817,0.9023817 -0.9023817,1.8047633 0,1.8047634 1.8047634,3.6095267 0.9023816,2.707145 0,2.707145 -0.9023816,1.8047634 -1.8047634,0.9023816"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function A(c, d) {
      var e = -8,
        f = -2;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_AQUARIUS)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 2.8866035,-2.8866035 3.8488047,1.9244023 m -4.8110059,-0.9622011 3.8488047,1.9244023 2.8866035,-2.8866035 2.8866035,1.9244023 m -3.84880467,-0.9622011 2.88660347,1.9244023 2.8866035,-2.8866035 1.9244024,1.9244023 m -2.8866035,-0.9622011 1.9244023,1.9244023 2.8866035,-2.8866035 m -17.319621,8.6598105 2.8866035,-2.88660348 3.8488047,1.92440238 m -4.8110059,-0.96220121 3.8488047,1.92440231 2.8866035,-2.88660348 2.8866035,1.92440238 m -3.84880467,-0.96220121 2.88660347,1.92440231 2.8866035,-2.88660348 1.9244024,1.92440238 m -2.8866035,-0.96220121 1.9244023,1.92440231 2.8866035,-2.88660348"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function B(c, d) {
      var e = -8,
        f = -8;
      (c = Math.round(c + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", b(a.SYMBOL_PISCES)),
        g.setAttribute(
          "transform",
          "translate(" +
            -c * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m " +
            c +
            ", " +
            d +
            " 4,2 2,2 1,3 0,3 -1,3 -2,2 -4,2 m 0,-17 3,1 2,1 2,2 1,3 m 0,3 -1,3 -2,2 -2,1 -3,1 m 16,-17 -3,1 -2,1 -2,2 -1,3 m 0,3 1,3 2,2 2,1 3,1 m 0,-17 -4,2 -2,2 -1,3 0,3 1,3 2,2 4,2 m -17,-9 18,0 m -18,1 18,0"
        ),
        h.setAttribute("stroke", a.SIGNS_COLOR),
        h.setAttribute("stroke-width", a.SIGNS_STROKE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function C(b, c) {
      var d = 12,
        e = -2;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m " +
            b +
            ", " +
            c +
            " -0.563078,-1.1261527 -1.689228,-0.5630765 -1.689229,0 -1.68923,0.5630765 -0.563076,1.1261527 0.563076,1.12615272 1.126154,0.56307636 2.815381,0.56307635 1.126152,0.56307647 0.563078,1.1261526 0,0.5630763 -0.563078,1.1261528 -1.689228,0.5630764 -1.689229,0 -1.68923,-0.5630764 -0.563076,-1.1261528 m -6.756916,-10.135374 -4.504611,11.8246032 m 4.504611,-11.8246032 4.504611,11.8246032 m -7.3199925,-3.94153457 5.6307625,0"
        ),
        g.setAttribute("stroke", a.SYMBOL_AXIS_FONT_COLOR),
        g.setAttribute("stroke-width", a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function D(b, c) {
      var d = 22,
        e = -1;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m " +
            b +
            ", " +
            c +
            " -0.5625,-1.125 -1.6875,-0.5625 -1.6875,0 -1.6875,0.5625 -0.5625,1.125 0.5625,1.125 1.125,0.5625 2.8125,0.5625 1.125,0.5625 0.5625,1.125 0,0.5625 -0.5625,1.125 -1.6875,0.5625 -1.6875,0 -1.6875,-0.5625 -0.5625,-1.125 m -11.25,-10.125 0,11.8125 m 0,-11.8125 3.9375,0 1.6875,0.5625 1.125,1.125 0.5625,1.125 0.5625,1.6875 0,2.8125 -0.5625,1.6875 -0.5625,1.125 -1.125,1.125 -1.6875,0.5625 -3.9375,0"
        ),
        g.setAttribute("stroke", a.SYMBOL_AXIS_FONT_COLOR),
        g.setAttribute("stroke-width", a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function E(b, c) {
      var d = 19,
        e = -4;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m " +
            b +
            ", " +
            c +
            " -1.004085,-1.0040845 -1.004084,-0.5020423 -1.506127,0 -1.004085,0.5020423 -1.004084,1.0040845 -0.502043,1.50612689 0,1.00408458 0.502043,1.50612683 1.004084,1.0040846 1.004085,0.5020423 1.506127,0 1.004084,-0.5020423 1.004085,-1.0040846 m -17.57148,-9.0367612 0,10.5428881 m 0,-10.5428881 4.016338,10.5428881 m 4.016338,-10.5428881 -4.016338,10.5428881 m 4.016338,-10.5428881 0,10.5428881"
        ),
        g.setAttribute("stroke", a.SYMBOL_AXIS_FONT_COLOR),
        g.setAttribute("stroke-width", a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function F(b, c) {
      var d = 19,
        e = 2;
      (b = Math.round(b + d * a.SYMBOL_SCALE)),
        (c = Math.round(c + e * a.SYMBOL_SCALE));
      var f = document.createElementNS(S.root.namespaceURI, "g");
      f.setAttribute(
        "transform",
        "translate(" +
          -b * (a.SYMBOL_SCALE - 1) +
          "," +
          -c * (a.SYMBOL_SCALE - 1) +
          ") scale(" +
          a.SYMBOL_SCALE +
          ")"
      );
      var g = document.createElementNS(S.root.namespaceURI, "path");
      return (
        g.setAttribute(
          "d",
          "m " +
            b +
            ", " +
            c +
            " -1.208852,-1.2088514 -1.208851,-0.6044258 -1.813278,0 -1.208852,0.6044258 -1.20885,1.2088514 -0.604426,1.81327715 0,1.20885135 0.604426,1.8132772 1.20885,1.2088513 1.208852,0.6044259 1.813278,0 1.208851,-0.6044259 1.208852,-1.2088513 m -11.4840902,-10.8796629 0,12.6929401"
        ),
        g.setAttribute("stroke", a.SYMBOL_AXIS_FONT_COLOR),
        g.setAttribute("stroke-width", a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE),
        g.setAttribute("fill", "none"),
        f.appendChild(g),
        f
      );
    }
    function G(b, d) {
      var e = 0,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_1)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -2.5128753,7.7578884 1.00515009,0 m 3.01545031,-9.5832737 -1.0051501,1.8253853 -2.51287527,7.7578884 m 3.51802537,-9.5832737 -3.01545031,9.5832737 m 3.01545031,-9.5832737 -1.5077251,1.3690388 -1.50772521,0.9126929 -1.00515009,0.4563463 m 2.5128753,-0.9126927 -1.00515016,0.4563464 -1.50772514,0.4563463"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function H(b, d) {
      var e = -2,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_2)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " 0,-0.4545454 0.4545454,0 0,0.9090909 -0.9090909,0 0,-0.9090909 0.4545455,-0.9090909 0.4545454,-0.4545455 1.36363637,-0.4545454 1.36363633,0 1.3636364,0.4545454 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -4.5454546,2.72727269 -0.9090909,0.90909091 -0.9090909,1.8181818 m 6.8181818,-9.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -1.36363633,0.9090909 m 1.36363633,-5 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -3.6363637,2.72727269 m -1.3636363,1.81818181 0.4545454,-0.4545454 0.9090909,0 2.27272732,0.4545454 2.27272728,0 0.4545454,-0.4545454 m -5,0 2.27272732,0.9090909 2.27272728,0 m -4.5454546,-0.9090909 2.27272732,1.3636363 1.36363638,0 0.9090909,-0.4545454 0.4545454,-0.9090909 0,-0.4545455"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function I(b, d) {
      var e = -2,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_3)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " 0,-0.4545454 0.45454549,0 0,0.9090909 -0.90909089,0 0,-0.9090909 0.4545454,-0.9090909 0.45454549,-0.4545455 1.36363636,-0.4545454 1.36363635,0 1.3636364,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.4545455,0.4545454 -0.9090909,0.4545455 -1.36363635,0.4545454 m 2.27272725,-4.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.4545454,0.4545454 m -0.4545455,-3.6363636 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -0.90909095,0.4545454 m -0.9090909,0 0.9090909,0 1.36363635,0.4545455 0.4545455,0.45454542 0.4545454,0.90909091 0,1.36363637 -0.4545454,0.9090909 -0.9090909,0.4545455 -1.3636364,0.4545454 -1.3636364,0 -1.3636363,-0.4545454 -0.4545455,-0.4545455 -0.4545454,-0.9090909 0,-0.90909091 0.9090909,0 0,0.90909091 -0.4545455,0 0,-0.45454546 m 5,-1.81818182 0.4545455,0.90909091 0,1.36363637 -0.4545455,0.9090909 m -1.36363635,-4.0909091 0.90909095,0.4545455 0.4545454,0.90909088 0,1.81818182 -0.4545454,0.9090909 -0.45454549,0.4545455 -0.90909091,0.4545454"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function J(b, d) {
      var e = 1,
        f = -4;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_4)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -2.28678383,7.7750651 0.91471356,0 m 2.74414057,-9.6044922 -0.9147135,1.8294271 -2.28678386,7.7750651 m 3.20149736,-9.6044922 -2.74414057,9.6044922 m 2.74414057,-9.6044922 -7.3177083,6.8603516 7.3177083,0"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function K(b, d) {
      var e = -2,
        f = -5;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_5)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -2.27272725,4.5454545 m 2.27272725,-4.5454545 4.54545455,0 m -4.54545455,0.4545454 3.63636365,0 m -4.0909091,0.4545455 2.2727273,0 1.8181818,-0.4545455 0.9090909,-0.4545454 m -6.8181818,4.5454545 0.4545454,-0.4545454 1.3636364,-0.4545455 1.36363636,0 1.36363634,0.4545455 0.4545455,0.4545454 0.4545454,0.90909092 0,1.36363638 -0.4545454,1.3636364 -0.9090909,0.9090909 -1.81818185,0.4545454 -1.36363635,0 -0.9090909,-0.4545454 -0.4545455,-0.4545455 -0.4545454,-0.9090909 0,-0.9090909 0.9090909,0 0,0.9090909 -0.4545455,0 0,-0.45454545 m 5,-2.72727275 0.4545455,0.90909092 0,1.36363638 -0.4545455,1.3636364 -0.9090909,0.9090909 m -0.45454544,-5.4545455 0.90909094,0.4545455 0.4545454,0.9090909 0,1.8181818 -0.4545454,1.3636364 -0.90909094,0.9090909 -0.90909091,0.4545454"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function L(b, d) {
      var e = 3,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_6)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " 0,-0.4545455 -0.4545455,0 0,0.9090909 0.9090909,0 0,-0.9090909 -0.4545454,-0.9090909 -0.909091,-0.4545454 -1.3636363,0 -1.36363638,0.4545454 -0.90909092,0.9090909 -0.9090909,1.3636364 -0.4545455,1.3636364 -0.4545454,1.81818178 0,1.36363636 0.4545454,1.36363636 0.4545455,0.4545455 0.9090909,0.4545454 1.36363637,0 1.36363633,-0.4545454 0.9090909,-0.9090909 0.4545455,-0.90909096 0,-1.36363636 -0.4545455,-0.90909088 -0.4545454,-0.4545455 -0.9090909,-0.4545454 -1.36363638,0 -0.90909092,0.4545454 -0.4545454,0.4545455 -0.4545455,0.90909088 m 1.36363636,-4.54545458 -0.90909086,1.3636364 -0.4545455,1.3636364 -0.4545455,1.81818178 0,1.81818182 0.4545455,0.9090909 m 4.0909091,-0.4545454 0.4545454,-0.90909096 0,-1.36363636 -0.4545454,-0.90909088 m -0.9090909,-5 -0.90909093,0.4545454 -0.90909091,1.3636364 -0.45454546,0.9090909 -0.4545454,1.3636364 -0.4545455,1.81818178 0,2.27272732 0.4545455,0.9090909 0.4545454,0.4545454 m 1.36363637,0 0.90909093,-0.4545454 0.4545454,-0.4545455 0.4545455,-1.36363636 0,-1.81818182 -0.4545455,-0.90909092 -0.4545454,-0.4545454"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function M(b, d) {
      var e = -4,
        f = -4;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_7)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -0.9090909,2.7272727 m 6.8181818,-2.7272727 -0.4545454,1.3636363 -0.909091,1.3636364 -1.8181818,2.2727273 -0.90909088,1.36363633 -0.45454546,1.36363637 -0.45454545,1.8181818 m 0.90909091,-3.63636362 -0.90909091,1.81818182 -0.45454546,1.8181818 m 4.09090905,-6.8181818 -2.72727268,2.72727272 -0.90909091,1.36363637 -0.45454546,0.90909091 -0.45454545,1.8181818 0.90909091,0 m -1.36363641,-8.1818182 1.36363641,-1.3636363 0.90909091,0 2.27272728,1.3636363 m -3.63636365,-0.9090909 1.36363637,0 2.27272728,0.9090909 m -4.5454546,0 0.90909095,-0.4545454 1.36363637,0 2.27272728,0.4545454 0.9090909,0 0.4545455,-0.4545454 0.4545454,-0.9090909"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function N(b, d) {
      var e = -1,
        f = -5;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_8)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -1.3631244,0.4543748 -0.4543748,0.4543748 -0.4543748,0.9087496 0,1.3631244 0.4543748,0.9087496 0.9087496,0.4543748 1.3631244,0 1.3631244,-0.4543748 0.9087496,-0.4543748 0.4543748,-0.9087496 0,-1.3631244 -0.4543748,-0.9087496 -0.9087496,-0.4543748 -1.8174992,0 m 0.9087496,0 -2.271874,0.4543748 m 0,0.4543748 -0.4543748,0.9087496 0,1.8174992 0.4543748,0.4543748 m -0.4543748,0 1.3631244,0.4543748 m 0.4543748,0 1.8174992,-0.4543748 m 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.3631244 -0.4543748,-0.9087496 m 0.4543748,0 -1.8174992,-0.4543748 m -0.9087496,0 -0.9087496,0.9087496 -0.4543748,0.9087496 0,1.8174992 0.4543748,0.9087496 m 1.3631244,0 0.9087496,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.8174992 -0.4543748,-0.9087496 m -2.7262488,4.543748 -1.8174992,0.4543748 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 1.3631244,0.4543748 1.8174992,0 1.8174992,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.36312436 -0.4543748,-0.9087496 -0.4543748,-0.45437484 -0.9087496,-0.4543748 m -0.9087496,0 -2.271874,0.4543748 m 0.4543748,0 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 m -0.4543748,0 2.271874,0.4543748 2.7262488,-0.4543748 m 0,-0.4543748 0.4543748,-0.9087496 0,-1.36312436 -0.4543748,-0.9087496 m 0,-0.45437484 -1.3631244,-0.4543748 m -0.9087496,0 -0.9087496,0.4543748 -0.9087496,0.90874964 -0.4543748,0.9087496 0,1.36312436 0.4543748,0.9087496 0.4543748,0.4543748 m 1.8174992,0 0.9087496,-0.4543748 0.4543748,-0.4543748 0.4543748,-0.9087496 0,-1.81749916 -0.4543748,-0.90874964 -0.4543748,-0.4543748"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function O(b, d) {
      var e = 1,
        f = -2;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_9)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      return (
        h.setAttribute(
          "d",
          "m" +
            b +
            ", " +
            d +
            " -0.4545455,0.9090909 -0.4545454,0.4545455 -0.9090909,0.45454542 -1.36363638,0 -0.90909092,-0.45454542 -0.4545454,-0.4545455 -0.4545455,-0.9090909 0,-1.3636364 0.4545455,-0.9090909 0.90909086,-0.9090909 1.36363637,-0.4545454 1.36363637,0 0.9090909,0.4545454 0.4545455,0.4545455 0.4545454,1.3636363 0,1.3636364 -0.4545454,1.81818182 -0.4545455,1.36363637 -0.9090909,1.36363641 -0.9090909,0.9090909 -1.36363638,0.4545454 -1.36363632,0 -0.909091,-0.4545454 -0.4545454,-0.9090909 0,-0.90909096 0.9090909,0 0,0.90909096 -0.4545455,0 0,-0.4545455 m 1.3636364,-3.1818182 -0.4545454,-0.9090909 0,-1.3636364 0.4545454,-0.9090909 m 4.0909091,-0.4545454 0.4545455,0.9090909 0,1.8181818 -0.4545455,1.81818182 -0.4545455,1.36363637 -0.9090909,1.36363641 m -1.81818178,-2.72727278 -0.45454546,-0.45454542 -0.45454546,-0.9090909 0,-1.8181819 0.45454546,-1.3636363 0.45454546,-0.4545455 0.90909091,-0.4545454 m 1.36363637,0 0.4545454,0.4545454 0.4545455,0.9090909 0,2.2727273 -0.4545455,1.81818182 -0.4545454,1.36363637 -0.4545455,0.90909091 -0.90909087,1.3636364 -0.90909091,0.4545454"
        ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h),
        g
      );
    }
    function P(b, d) {
      var e = -3,
        f = -3.5;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_10)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      h.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          d +
          " -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915"
      ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h);
      var i = 6.5,
        j = -1.5,
        k = document.createElementNS(S.root.namespaceURI, "path");
      return (
        k.setAttribute(
          "d",
          "m" +
            (b + i) +
            ", " +
            (d + j) +
            " -1.36363638,0.4545454 -0.90909092,0.9090909 -0.9090909,1.3636364 -0.4545455,1.3636364 -0.4545454,1.81818178 0,1.36363636 0.4545454,1.36363636 0.4545455,0.4545455 0.9090909,0.4545454 0.90909092,0 1.36363638,-0.4545454 0.9090909,-0.9090909 0.9090909,-1.36363641 0.4545455,-1.36363637 0.4545454,-1.81818182 0,-1.3636364 -0.4545454,-1.3636363 -0.4545455,-0.4545455 -0.9090909,-0.4545454 -0.9090909,0 m -1.36363638,0.9090909 -0.90909092,0.9090909 -0.4545454,0.9090909 -0.4545455,1.3636364 -0.4545455,1.81818178 0,1.81818182 0.4545455,0.9090909 m 3.1818182,0 0.9090909,-0.9090909 0.4545454,-0.90909091 0.4545455,-1.36363637 0.4545455,-1.81818182 0,-1.8181818 -0.4545455,-0.9090909 m -1.8181818,-0.9090909 -0.90909093,0.4545454 -0.90909091,1.3636364 -0.45454546,0.9090909 -0.4545454,1.3636364 -0.4545455,1.81818178 0,2.27272732 0.4545455,0.9090909 0.4545454,0.4545454 m 0.90909092,0 0.90909091,-0.4545454 0.90909087,-1.3636364 0.4545455,-0.90909091 0.4545454,-1.36363637 0.4545455,-1.81818182 0,-2.2727273 -0.4545455,-0.9090909 -0.4545454,-0.4545454"
        ),
        k.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        k.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        k.setAttribute("fill", "none"),
        g.appendChild(k),
        g
      );
    }
    function Q(b, d) {
      var e = -3,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_11)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      h.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          d +
          " -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915"
      ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h);
      var i = 6,
        j = 0,
        k = document.createElementNS(S.root.namespaceURI, "path");
      return (
        k.setAttribute(
          "d",
          "m" +
            (b + i) +
            ", " +
            (d + j) +
            " -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915"
        ),
        k.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        k.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        k.setAttribute("fill", "none"),
        g.appendChild(k),
        g
      );
    }
    function R(b, d) {
      var e = -3,
        f = -3;
      (b = Math.round(b + e * a.SYMBOL_SCALE)),
        (d = Math.round(d + f * a.SYMBOL_SCALE));
      var g = document.createElementNS(S.root.namespaceURI, "g");
      g.setAttribute("id", c(a.SYMBOL_CUSP_12)),
        g.setAttribute(
          "transform",
          "translate(" +
            -b * (a.SYMBOL_SCALE - 1) +
            "," +
            -d * (a.SYMBOL_SCALE - 1) +
            ") scale(" +
            a.SYMBOL_SCALE +
            ")"
        );
      var h = document.createElementNS(S.root.namespaceURI, "path");
      h.setAttribute(
        "d",
        "m" +
          b +
          ", " +
          d +
          " -2.28795747,7.7790553 0.91518297,0 m 2.7455489,-9.6094213 -0.9151829,1.830366 -2.28795748,7.7790553 m 3.20314038,-9.6094213 -2.7455489,9.6094213 m 2.7455489,-9.6094213 -1.3727744,1.3727745 -1.3727745,0.915183 -0.91518297,0.4575915 m 2.28795747,-0.915183 -0.91518301,0.4575915 -1.37277446,0.4575915"
      ),
        h.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        h.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        h.setAttribute("fill", "none"),
        g.appendChild(h);
      var i = 4,
        j = 1,
        k = document.createElementNS(S.root.namespaceURI, "path");
      return (
        k.setAttribute(
          "d",
          "m" +
            (b + i) +
            ", " +
            (d + j) +
            " 0,-0.4545454 0.4545454,0 0,0.9090909 -0.9090909,0 0,-0.9090909 0.4545455,-0.9090909 0.4545454,-0.4545455 1.36363637,-0.4545454 1.36363633,0 1.3636364,0.4545454 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -4.5454546,2.72727269 -0.9090909,0.90909091 -0.9090909,1.8181818 m 6.8181818,-9.0909091 0.4545455,0.9090909 0,0.9090909 -0.4545455,0.909091 -0.9090909,0.9090909 -1.36363633,0.9090909 m 1.36363633,-5 0.4545455,0.4545454 0.4545454,0.9090909 0,0.9090909 -0.4545454,0.909091 -0.9090909,0.9090909 -3.6363637,2.72727269 m -1.3636363,1.81818181 0.4545454,-0.4545454 0.9090909,0 2.27272732,0.4545454 2.27272728,0 0.4545454,-0.4545454 m -5,0 2.27272732,0.9090909 2.27272728,0 m -4.5454546,-0.9090909 2.27272732,1.3636363 1.36363638,0 0.9090909,-0.4545454 0.4545454,-0.9090909 0,-0.4545455"
        ),
        k.setAttribute("stroke", a.CUSPS_FONT_COLOR),
        k.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
        k.setAttribute("fill", "none"),
        g.appendChild(k),
        g
      );
    }
    var S;
    (a.SVG = function (b, c, d) {
      var e = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      e.setAttributeNS(
        "http://www.w3.org/2000/xmlns/",
        "xmlns:xlink",
        "http://www.w3.org/1999/xlink"
      ),
        e.setAttribute("style", "position: relative; overflow: hidden;"),
        e.setAttribute("version", "1.1"),
        e.setAttribute("width", c),
        e.setAttribute("height", d),
        e.setAttribute("viewBox", "0 0 " + c + " " + d),
        document.getElementById(b).appendChild(e),
        (a._paperElementId = b + "-" + a.ID_CHART);
      var f = document.createElementNS(e.namespaceURI, "g");
      f.setAttribute("id", a._paperElementId),
        e.appendChild(f),
        (this.DOMElement = e),
        (this.root = f),
        (this.width = c),
        (this.height = d),
        (S = this);
    }),
      (a.SVG.prototype.getSymbol = function (b, c, S) {
        switch (b) {
          case a.SYMBOL_SUN:
            return d(c, S);
          case a.SYMBOL_MOON:
            return e(c, S);
          case a.SYMBOL_MERCURY:
            return f(c, S);
          case a.SYMBOL_VENUS:
            return g(c, S);
          case a.SYMBOL_MARS:
            return h(c, S);
          case a.SYMBOL_JUPITER:
            return i(c, S);
          case a.SYMBOL_SATURN:
            return j(c, S);
          case a.SYMBOL_URANUS:
            return k(c, S);
          case a.SYMBOL_NEPTUNE:
            return l(c, S);
          case a.SYMBOL_PLUTO:
            return m(c, S);
          case a.SYMBOL_CHIRON:
            return n(c, S);
          case a.SYMBOL_LILITH:
            return o(c, S);
          case a.SYMBOL_NNODE:
            return p(c, S);
          case a.SYMBOL_ARIES:
            return q(c, S);
          case a.SYMBOL_TAURUS:
            return r(c, S);
          case a.SYMBOL_GEMINI:
            return s(c, S);
          case a.SYMBOL_CANCER:
            return t(c, S);
          case a.SYMBOL_LEO:
            return u(c, S);
          case a.SYMBOL_VIRGO:
            return v(c, S);
          case a.SYMBOL_LIBRA:
            return w(c, S);
          case a.SYMBOL_SCORPIO:
            return x(c, S);
          case a.SYMBOL_SAGITTARIUS:
            return y(c, S);
          case a.SYMBOL_CAPRICORN:
            return z(c, S);
          case a.SYMBOL_AQUARIUS:
            return A(c, S);
          case a.SYMBOL_PISCES:
            return B(c, S);
          case a.SYMBOL_AS:
            return C(c, S);
          case a.SYMBOL_DS:
            return D(c, S);
          case a.SYMBOL_MC:
            return E(c, S);
          case a.SYMBOL_IC:
            return F(c, S);
          case a.SYMBOL_IC:
            return F(c, S);
          case a.SYMBOL_CUSP_1:
            return G(c, S);
          case a.SYMBOL_CUSP_2:
            return H(c, S);
          case a.SYMBOL_CUSP_3:
            return I(c, S);
          case a.SYMBOL_CUSP_4:
            return J(c, S);
          case a.SYMBOL_CUSP_5:
            return K(c, S);
          case a.SYMBOL_CUSP_6:
            return L(c, S);
          case a.SYMBOL_CUSP_7:
            return M(c, S);
          case a.SYMBOL_CUSP_8:
            return N(c, S);
          case a.SYMBOL_CUSP_9:
            return O(c, S);
          case a.SYMBOL_CUSP_10:
            return P(c, S);
          case a.SYMBOL_CUSP_11:
            return Q(c, S);
          case a.SYMBOL_CUSP_12:
            return R(c, S);
          default:
            var T = this.circle(c, S, 8);
            return (
              T.setAttribute("stroke", "#ffff00"),
              T.setAttribute("stroke-width", 1),
              T.setAttribute("fill", "#ff0000"),
              T
            );
        }
      }),
      (a.SVG.prototype.segment = function T(b, c, d, e, f, g, h, i) {
        var j = h || 0,
          k = i || 0;
        (e = (((a.SHIFT_IN_DEGREES - e) % 360) * Math.PI) / 180),
          (f = (((a.SHIFT_IN_DEGREES - f) % 360) * Math.PI) / 180);
        var T = document.createElementNS(S.root.namespaceURI, "path");
        return (
          T.setAttribute(
            "d",
            "M " +
              (b + g * Math.cos(e)) +
              ", " +
              (c + g * Math.sin(e)) +
              " l " +
              (d - g) * Math.cos(e) +
              ", " +
              (d - g) * Math.sin(e) +
              " A " +
              d +
              ", " +
              d +
              ",0 ," +
              j +
              ", " +
              k +
              ", " +
              (b + d * Math.cos(f)) +
              ", " +
              (c + d * Math.sin(f)) +
              " l " +
              (d - g) * -Math.cos(f) +
              ", " +
              (d - g) * -Math.sin(f) +
              " A " +
              g +
              ", " +
              g +
              ",0 ," +
              j +
              ", 1, " +
              (b + g * Math.cos(e)) +
              ", " +
              (c + g * Math.sin(e))
          ),
          T.setAttribute("fill", "none"),
          T
        );
      }),
      (a.SVG.prototype.line = function U(a, b, c, d, e) {
        var U = document.createElementNS(S.root.namespaceURI, "line");
        return (
          U.setAttribute("x1", a),
          U.setAttribute("y1", b),
          U.setAttribute("x2", c),
          U.setAttribute("y2", d),
          U
        );
      }),
      (a.SVG.prototype.circle = function V(a, b, c) {
        var V = document.createElementNS(S.root.namespaceURI, "circle");
        return (
          V.setAttribute("cx", a),
          V.setAttribute("cy", b),
          V.setAttribute("r", c),
          V.setAttribute("fill", "none"),
          V
        );
      }),
      (a.SVG.prototype.text = function W(b, c, d, e, f) {
        var W = document.createElementNS(S.root.namespaceURI, "text");
        return (
          W.setAttribute("x", c),
          W.setAttribute("y", d),
          W.setAttribute("font-size", e),
          W.setAttribute("fill", f),
          W.setAttribute("font-family", "serif"),
          W.setAttribute("dominant-baseline", "central"),
          W.appendChild(document.createTextNode(b)),
          W.setAttribute(
            "transform",
            "translate(" +
              -c * (a.SYMBOL_SCALE - 1) +
              "," +
              -d * (a.SYMBOL_SCALE - 1) +
              ") scale(" +
              a.SYMBOL_SCALE +
              ")"
          ),
          W
        );
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    (a.Chart = function (b, c, d, e) {
      if ((e && Object.assign(a, e), b && !document.getElementById(b))) {
        var f = document.createElement("div");
        f.setAttribute("id", b), document.body.appendChild(f);
      }
      return (
        (this.paper = new a.SVG(b, c, d)),
        (this.cx = this.paper.width / 2),
        (this.cy = this.paper.height / 2),
        (this.radius = this.paper.height / 2 - a.MARGIN),
        this
      );
    }),
      (a.Chart.prototype.radix = function (b) {
        var c = new a.Radix(this.paper, this.cx, this.cy, this.radius, b);
        return (
          c.drawBg(),
          c.drawUniverse(),
          c.drawRuler(),
          c.drawPoints(),
          c.drawCusps(),
          c.drawAxis(),
          c.drawCircles(),
          c
        );
      }),
      (a.Chart.prototype.scale = function (a) {
        this.paper.root.setAttribute(
          "transform",
          "translate(" +
            -this.cx * (a - 1) +
            "," +
            -this.cy * (a - 1) +
            ") scale(" +
            a +
            ")"
        );
      }),
      (a.Chart.prototype.calibrate = function () {
        for (
          var b,
            c,
            d,
            e = 60,
            f = [
              "Sun",
              "Moon",
              "Mercury",
              "Venus",
              "Mars",
              "Jupiter",
              "Saturn",
              "Uranus",
              "Neptune",
              "Pluto",
              "Chiron",
              "Lilith",
              "NNode",
            ],
            g = 0;
          g < f.length;
          g++
        )
          (b = a.utils.getPointPosition(
            this.cx,
            this.cy,
            2 * this.radius,
            30 * g
          )),
            (d = this.paper.line(this.cx, this.cy, b.x, b.y)),
            d.setAttribute("stroke", a.LINE_COLOR),
            this.paper.root.appendChild(d),
            (c = this.paper.circle(this.cx, this.cy, e + e * g)),
            c.setAttribute("stroke", a.LINE_COLOR),
            c.setAttribute("stroke-width", 1),
            this.paper.root.appendChild(c);
        for (var h = 0, i = f.length; i > h; h++)
          for (var j = e + e * h, g = 0; 12 > g; g++)
            (b = a.utils.getPointPosition(this.cx, this.cy, j, 30 * g)),
              (c = this.paper.circle(
                b.x,
                b.y,
                a.COLLISION_RADIUS * a.SYMBOL_SCALE
              )),
              c.setAttribute("stroke", "red"),
              c.setAttribute("stroke-width", 1),
              this.paper.root.appendChild(c),
              this.paper.root.appendChild(this.paper.getSymbol(f[h], b.x, b.y));
        return this;
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    var b;
    (a.Radix = function (c, d, e, f, g) {
      var h = a.utils.validate(g);
      if (h.hasError) throw new Error(h.messages);
      if (
        ((this.data = g),
        (this.paper = c),
        (this.cx = d),
        (this.cy = e),
        (this.radius = f),
        (this.locatedPoints = []),
        (this.rulerRadius =
          this.radius / a.INNER_CIRCLE_RADIUS_RATIO / a.RULER_RADIUS),
        (this.pointRadius =
          this.radius -
          (this.radius / a.INNER_CIRCLE_RADIUS_RATIO +
            2 * this.rulerRadius +
            a.PADDING * a.SYMBOL_SCALE)),
        (this.toPoints = JSON.parse(JSON.stringify(this.data.planets))),
        (this.shift = 0),
        this.data.cusps && this.data.cusps[0])
      ) {
        var i = a.utils.radiansToDegree(2 * Math.PI);
        this.shift = i - this.data.cusps[0];
      }
      var j = document.createElementNS(this.paper.root.namespaceURI, "g");
      return (
        j.setAttribute("id", a._paperElementId + "-" + a.ID_ASPECTS),
        this.paper.root.appendChild(j),
        (this.universe = document.createElementNS(
          this.paper.root.namespaceURI,
          "g"
        )),
        this.universe.setAttribute("id", a._paperElementId + "-" + a.ID_RADIX),
        this.paper.root.appendChild(this.universe),
        (b = this),
        this
      );
    }),
      (a.Radix.prototype.drawBg = function () {
        var b = this.universe,
          c = a.utils.getEmptyWrapper(b, a._paperElementId + "-" + a.ID_BG),
          d = 1,
          e = 0,
          f = 359.99,
          g = this.paper.segment(
            this.cx,
            this.cy,
            this.radius - this.radius / a.INNER_CIRCLE_RADIUS_RATIO,
            e,
            f,
            this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
            d
          );
        g.setAttribute("fill", a.STROKE_ONLY ? "none" : a.COLOR_BACKGROUND),
          c.appendChild(g);
      }),
      (a.Radix.prototype.drawUniverse = function () {
        for (
          var b = this.universe,
            c = a.utils.getEmptyWrapper(
              b,
              a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_SIGNS
            ),
            d = 0,
            e = 30,
            f = this.shift,
            g = a.COLORS_SIGNS.length;
          g > d;
          d++
        ) {
          var h = this.paper.segment(
            this.cx,
            this.cy,
            this.radius,
            f,
            f + e,
            this.radius - this.radius / a.INNER_CIRCLE_RADIUS_RATIO
          );
          h.setAttribute("fill", a.STROKE_ONLY ? "none" : a.COLORS_SIGNS[d]),
            h.setAttribute(
              "id",
              a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_SIGNS + "-" + d
            ),
            h.setAttribute("stroke", a.STROKE_ONLY ? a.CIRCLE_COLOR : "none"),
            h.setAttribute("stroke-width", a.STROKE_ONLY ? 1 : 0),
            c.appendChild(h),
            (f += e);
        }
        for (
          var d = 0, e = 30, f = 15 + this.shift, g = a.SYMBOL_SIGNS.length;
          g > d;
          d++
        ) {
          var i = a.utils.getPointPosition(
            this.cx,
            this.cy,
            this.radius - this.radius / a.INNER_CIRCLE_RADIUS_RATIO / 2,
            f
          );
          c.appendChild(this.paper.getSymbol(a.SYMBOL_SIGNS[d], i.x, i.y)),
            (f += e);
        }
      }),
      (a.Radix.prototype.drawPoints = function () {
        if (null != this.data.planets) {
          var b,
            c,
            d = this.universe,
            e = a.utils.getEmptyWrapper(
              d,
              a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_POINTS
            ),
            f =
              this.radius -
              (this.radius / a.INNER_CIRCLE_RADIUS_RATIO +
                this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO),
            g =
              ((f - 2 * (a.PADDING * a.SYMBOL_SCALE)) /
                Object.keys(this.data.planets).length,
              this.radius -
                (this.radius / a.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius));
          for (var h in this.data.planets)
            if (this.data.planets.hasOwnProperty(h)) {
              var i = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  this.pointRadius,
                  this.data.planets[h][0] + this.shift
                ),
                j = {
                  name: h,
                  x: i.x,
                  y: i.y,
                  r: a.COLLISION_RADIUS * a.SYMBOL_SCALE,
                  angle: this.data.planets[h][0] + this.shift,
                  pointer: this.data.planets[h][0] + this.shift,
                };
              this.locatedPoints = a.utils.assemble(this.locatedPoints, j, {
                cx: this.cx,
                cy: this.cy,
                r: this.pointRadius,
              });
            }
          a.DEBUG &&
            console.log("Radix count of points: " + this.locatedPoints.length),
            a.DEBUG &&
              console.log(
                "Radix located points:\n" + JSON.stringify(this.locatedPoints)
              ),
            this.locatedPoints.forEach(function (d) {
              (b = a.utils.getPointPosition(
                this.cx,
                this.cy,
                g,
                this.data.planets[d.name][0] + this.shift
              )),
                (c = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  g - this.rulerRadius / 2,
                  this.data.planets[d.name][0] + this.shift
                ));
              var f = this.paper.line(b.x, b.y, c.x, c.y);
              if (
                (f.setAttribute("stroke", a.CIRCLE_COLOR),
                f.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
                e.appendChild(f),
                !a.STROKE_ONLY &&
                  this.data.planets[d.name][0] + this.shift != d.angle)
              ) {
                (b = c),
                  (c = a.utils.getPointPosition(
                    this.cx,
                    this.cy,
                    this.pointRadius + a.COLLISION_RADIUS * a.SYMBOL_SCALE,
                    d.angle
                  ));
                var h = this.paper.line(b.x, b.y, c.x, c.y);
                h.setAttribute("stroke", a.LINE_COLOR),
                  h.setAttribute(
                    "stroke-width",
                    0.5 * (a.CUSPS_STROKE * a.SYMBOL_SCALE)
                  ),
                  e.appendChild(h);
              }
              var i = this.paper.getSymbol(d.name, d.x, d.y);
              i.setAttribute(
                "id",
                a._paperElementId +
                  "-" +
                  a.ID_RADIX +
                  "-" +
                  a.ID_POINTS +
                  "-" +
                  d.name
              ),
                e.appendChild(i);
              var j = [
                  (Math.round(this.data.planets[d.name][0]) % 30).toString(),
                ],
                k = new a.Zodiac(this.data.cusps);
              this.data.planets[d.name][1] &&
              k.isRetrograde(this.data.planets[d.name][1])
                ? j.push("R")
                : j.push(""),
                (j = j.concat(
                  k
                    .getDignities(
                      { name: d.name, position: this.data.planets[d.name][0] },
                      a.DIGNITIES_EXACT_EXALTATION_DEFAULT
                    )
                    .join(",")
                ));
              var l = a.utils.getDescriptionPosition(d, j);
              l.forEach(function (b) {
                e.appendChild(
                  this.paper.text(
                    b.text,
                    b.x,
                    b.y,
                    a.POINTS_TEXT_SIZE,
                    a.SIGNS_COLOR
                  )
                );
              }, this);
            }, this);
        }
      }),
      (a.Radix.prototype.drawAxis = function () {
        if (null != this.data.cusps) {
          var b,
            c,
            d,
            e = this.universe,
            f = a.utils.getEmptyWrapper(
              e,
              a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_AXIS
            ),
            g = this.radius + this.radius / a.INNER_CIRCLE_RADIUS_RATIO / 4,
            h = 0,
            i = 3,
            j = 6,
            k = 9;
          [h, i, j, k].forEach(function (e) {
            (c = a.utils.getPointPosition(
              this.cx,
              this.cy,
              this.radius,
              this.data.cusps[e] + this.shift
            )),
              (d = a.utils.getPointPosition(
                this.cx,
                this.cy,
                g,
                this.data.cusps[e] + this.shift
              )),
              (b = this.paper.line(c.x, c.y, d.x, d.y)),
              b.setAttribute("stroke", a.LINE_COLOR),
              b.setAttribute(
                "stroke-width",
                a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE
              ),
              f.appendChild(b),
              e == h &&
                ((textPosition = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  g + 20 * a.SYMBOL_SCALE,
                  this.data.cusps[e] + this.shift
                )),
                f.appendChild(
                  this.paper.getSymbol(
                    a.SYMBOL_AS,
                    textPosition.x,
                    textPosition.y
                  )
                )),
              e == j &&
                ((textPosition = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  g + 2 * a.SYMBOL_SCALE,
                  this.data.cusps[e] + this.shift
                )),
                f.appendChild(
                  this.paper.getSymbol(
                    a.SYMBOL_DS,
                    textPosition.x,
                    textPosition.y
                  )
                )),
              e == i &&
                ((textPosition = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  g + 10 * a.SYMBOL_SCALE,
                  this.data.cusps[e] - 2 + this.shift
                )),
                f.appendChild(
                  this.paper.getSymbol(
                    a.SYMBOL_IC,
                    textPosition.x,
                    textPosition.y
                  )
                )),
              e == k &&
                ((textPosition = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  g + 10 * a.SYMBOL_SCALE,
                  this.data.cusps[e] + 2 + this.shift
                )),
                f.appendChild(
                  this.paper.getSymbol(
                    a.SYMBOL_MC,
                    textPosition.x,
                    textPosition.y
                  )
                ));
          }, this);
        }
      }),
      (a.Radix.prototype.drawCusps = function () {
        if (null != this.data.cusps)
          for (
            var b,
              c = this.universe,
              d = a.utils.getEmptyWrapper(
                c,
                a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_CUSPS
              ),
              e =
                this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO +
                a.COLLISION_RADIUS * a.SYMBOL_SCALE,
              f = 0,
              g = 3,
              h = 6,
              i = 9,
              j = [f, g, h, i],
              k = 0,
              l = this.data.cusps.length;
            l > k;
            k++
          ) {
            (b = a.utils.getDashedLinesPositions(
              this.cx,
              this.cy,
              this.data.cusps[k] + this.shift,
              this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
              this.radius -
                (this.radius / a.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius),
              this.pointRadius,
              this.locatedPoints
            )),
              b.forEach(function (b) {
                (b = this.paper.line(b.startX, b.startY, b.endX, b.endY)),
                  b.setAttribute("stroke", a.LINE_COLOR),
                  -1 != j.indexOf(k)
                    ? b.setAttribute(
                        "stroke-width",
                        a.SYMBOL_AXIS_STROKE * a.SYMBOL_SCALE
                      )
                    : b.setAttribute(
                        "stroke-width",
                        a.CUSPS_STROKE * a.SYMBOL_SCALE
                      ),
                  d.appendChild(b);
              }, this);
            var m = a.utils.radiansToDegree(2 * Math.PI),
              n = this.data.cusps[k],
              o = this.data.cusps[(k + 1) % 12],
              p = o - n > 0 ? o - n : o - n + m,
              q = a.utils.getPointPosition(
                this.cx,
                this.cy,
                e,
                ((n + p / 2) % m) + this.shift
              );
            d.appendChild(this.paper.getSymbol((k + 1).toString(), q.x, q.y));
          }
      }),
      (a.Radix.prototype.aspects = function (c) {
        for (
          var d =
              null != c && Array.isArray(c)
                ? c
                : new a.AspectCalculator(this.toPoints).radix(
                    this.data.planets
                  ),
            e = this.universe,
            f = a.utils.getEmptyWrapper(
              e,
              a._paperElementId + "-" + a.ID_ASPECTS
            ),
            g = [],
            h = 0,
            i = d.length;
          i > h;
          h++
        ) {
          var j =
              d[h].aspect.name +
              "-" +
              d[h].point.name +
              "-" +
              d[h].toPoint.name,
            k =
              d[h].aspect.name +
              "-" +
              d[h].toPoint.name +
              "-" +
              d[h].point.name;
          if (-1 == g.indexOf(k)) {
            g.push(j);
            var l = a.utils.getPointPosition(
                this.cx,
                this.cy,
                this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
                d[h].toPoint.position + this.shift
              ),
              m = a.utils.getPointPosition(
                this.cx,
                this.cy,
                this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
                d[h].point.position + this.shift
              ),
              n = this.paper.line(l.x, l.y, m.x, m.y);
            n.setAttribute(
              "stroke",
              a.STROKE_ONLY ? a.LINE_COLOR : d[h].aspect.color
            ),
              n.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
              n.setAttribute("data-name", d[h].aspect.name),
              n.setAttribute("data-degree", d[h].aspect.degree),
              n.setAttribute("data-point", d[h].point.name),
              n.setAttribute("data-toPoint", d[h].toPoint.name),
              n.setAttribute("data-precision", d[h].precision),
              f.appendChild(n);
          }
        }
        return b;
      }),
      (a.Radix.prototype.addPointsOfInterest = function (a) {
        for (point in a) this.toPoints[point] = a[point];
        return b;
      }),
      (a.Radix.prototype.drawRuler = function () {
        var b = this.universe,
          c = a.utils.getEmptyWrapper(
            b,
            a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_RULER
          ),
          d =
            this.radius -
            (this.radius / a.INNER_CIRCLE_RADIUS_RATIO + this.rulerRadius),
          e = a.utils.getRulerPositions(
            this.cx,
            this.cy,
            d,
            d + this.rulerRadius,
            this.shift
          );
        e.forEach(function (b) {
          var d = this.paper.line(b.startX, b.startY, b.endX, b.endY);
          d.setAttribute("stroke", a.CIRCLE_COLOR),
            d.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
            c.appendChild(d);
        }, this);
        var f;
        (f = this.paper.circle(this.cx, this.cy, d)),
          f.setAttribute("stroke", a.CIRCLE_COLOR),
          f.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
          c.appendChild(f);
      }),
      (a.Radix.prototype.drawCircles = function () {
        var b,
          c = this.universe,
          d = a.utils.getEmptyWrapper(
            c,
            a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_CIRCLES
          );
        (b = this.paper.circle(
          this.cx,
          this.cy,
          this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO
        )),
          b.setAttribute("stroke", a.CIRCLE_COLOR),
          b.setAttribute("stroke-width", a.CIRCLE_STRONG * a.SYMBOL_SCALE),
          d.appendChild(b),
          (b = this.paper.circle(this.cx, this.cy, this.radius)),
          b.setAttribute("stroke", a.CIRCLE_COLOR),
          b.setAttribute("stroke-width", a.CIRCLE_STRONG * a.SYMBOL_SCALE),
          d.appendChild(b),
          (b = this.paper.circle(
            this.cx,
            this.cy,
            this.radius - this.radius / a.INNER_CIRCLE_RADIUS_RATIO
          )),
          b.setAttribute("stroke", a.CIRCLE_COLOR),
          b.setAttribute("stroke-width", a.CIRCLE_STRONG * a.SYMBOL_SCALE),
          d.appendChild(b);
      }),
      (a.Radix.prototype.transit = function (c) {
        a.utils.getEmptyWrapper(
          this.universe,
          a._paperElementId + "-" + a.ID_RADIX + "-" + a.ID_AXIS
        );
        var d = new a.Transit(b, c);
        return (
          d.drawBg(),
          d.drawPoints(),
          d.drawCusps(),
          d.drawRuler(),
          d.drawCircles(),
          d
        );
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    var b;
    (a.Transit = function (c, d) {
      var e = a.utils.validate(d);
      if (e.hasError) throw new Error(e.messages);
      return (
        (this.data = d),
        (this.paper = c.paper),
        (this.cx = c.cx),
        (this.cy = c.cy),
        (this.toPoints = c.toPoints),
        (this.radius = c.radius),
        (this.rulerRadius =
          this.radius / a.INNER_CIRCLE_RADIUS_RATIO / a.RULER_RADIUS),
        (this.pointRadius =
          this.radius +
          (this.radius / a.INNER_CIRCLE_RADIUS_RATIO +
            a.PADDING * a.SYMBOL_SCALE)),
        (this.shift = c.shift),
        (this.universe = document.createElementNS(
          this.paper.root.namespaceURI,
          "g"
        )),
        this.universe.setAttribute(
          "id",
          this.paper.elementId + "-" + a.ID_TRANSIT
        ),
        this.paper.root.appendChild(this.universe),
        (b = this),
        this
      );
    }),
      (a.Transit.prototype.drawBg = function () {
        var b = this.universe,
          c = a.utils.getEmptyWrapper(b, a._paperElementId + "-" + a.ID_BG),
          d = 1,
          e = 0,
          f = 359.99,
          g = this.paper.segment(
            this.cx,
            this.cy,
            this.radius + this.radius / a.INNER_CIRCLE_RADIUS_RATIO,
            e,
            f,
            this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
            d
          );
        g.setAttribute("fill", a.STROKE_ONLY ? "none" : a.COLOR_BACKGROUND),
          c.appendChild(g);
      }),
      (a.Transit.prototype.drawPoints = function (b) {
        var c = null == b ? this.data.planets : b;
        if (null != c) {
          var d,
            e,
            f = this.universe,
            g = a.utils.getEmptyWrapper(
              f,
              a._paperElementId + "-" + a.ID_TRANSIT + "-" + a.ID_POINTS
            ),
            h =
              this.radius -
              (this.radius / a.INNER_CIRCLE_RADIUS_RATIO +
                this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO),
            i =
              ((h - 2 * (a.PADDING * a.SYMBOL_SCALE)) / Object.keys(c).length,
              this.radius + this.radius / a.INNER_CIRCLE_RADIUS_RATIO);
          this.locatedPoints = [];
          for (var j in c)
            if (c.hasOwnProperty(j)) {
              var k = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  this.pointRadius,
                  c[j][0] + this.shift
                ),
                l = {
                  name: j,
                  x: k.x,
                  y: k.y,
                  r: a.COLLISION_RADIUS * a.SYMBOL_SCALE,
                  angle: c[j][0] + this.shift,
                  pointer: c[j][0] + this.shift,
                };
              this.locatedPoints = a.utils.assemble(this.locatedPoints, l, {
                cx: this.cx,
                cy: this.cy,
                r: this.pointRadius,
              });
            }
          a.DEBUG &&
            console.log(
              "Transit count of points: " + this.locatedPoints.length
            ),
            a.DEBUG &&
              console.log(
                "Transit located points:\n" + JSON.stringify(this.locatedPoints)
              ),
            this.locatedPoints.forEach(function (b) {
              (d = a.utils.getPointPosition(
                this.cx,
                this.cy,
                i,
                c[b.name][0] + this.shift
              )),
                (e = a.utils.getPointPosition(
                  this.cx,
                  this.cy,
                  i + this.rulerRadius / 2,
                  c[b.name][0] + this.shift
                ));
              var f = this.paper.line(d.x, d.y, e.x, e.y);
              if (
                (f.setAttribute("stroke", a.CIRCLE_COLOR),
                f.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
                g.appendChild(f),
                !a.STROKE_ONLY && c[b.name][0] + this.shift != b.angle)
              ) {
                (d = e),
                  (e = a.utils.getPointPosition(
                    this.cx,
                    this.cy,
                    this.pointRadius - a.COLLISION_RADIUS * a.SYMBOL_SCALE,
                    b.angle
                  ));
                var h = this.paper.line(d.x, d.y, e.x, e.y);
                h.setAttribute("stroke", a.LINE_COLOR),
                  h.setAttribute(
                    "stroke-width",
                    0.5 * (a.CUSPS_STROKE * a.SYMBOL_SCALE)
                  ),
                  g.appendChild(h);
              }
              var j = this.paper.getSymbol(b.name, b.x, b.y);
              j.setAttribute(
                "id",
                a._paperElementId +
                  "-" +
                  a.ID_TRANSIT +
                  "-" +
                  a.ID_POINTS +
                  "-" +
                  b.name
              ),
                g.appendChild(j);
              var k = [(Math.round(c[b.name][0]) % 30).toString()],
                l = new a.Zodiac(this.data.cusps);
              c[b.name][1] && l.isRetrograde(c[b.name][1])
                ? k.push("R")
                : k.push(""),
                (k = k.concat(
                  l
                    .getDignities(
                      { name: b.name, position: c[b.name][0] },
                      a.DIGNITIES_EXACT_EXALTATION_DEFAULT
                    )
                    .join(",")
                ));
              var m = a.utils.getDescriptionPosition(b, k);
              m.forEach(function (b) {
                g.appendChild(
                  this.paper.text(
                    b.text,
                    b.x,
                    b.y,
                    a.POINTS_TEXT_SIZE,
                    a.SIGNS_COLOR
                  )
                );
              }, this);
            }, this);
        }
      }),
      (a.Transit.prototype.drawCircles = function () {
        var b,
          c = this.universe,
          d = a.utils.getEmptyWrapper(
            c,
            a._paperElementId + "-" + a.ID_TRANSIT + "-" + a.ID_CIRCLES
          ),
          e = this.radius + this.radius / a.INNER_CIRCLE_RADIUS_RATIO;
        (b = this.paper.circle(this.cx, this.cy, e)),
          b.setAttribute("stroke", a.CIRCLE_COLOR),
          b.setAttribute("stroke-width", a.CIRCLE_STRONG * a.SYMBOL_SCALE),
          d.appendChild(b);
      }),
      (a.Transit.prototype.drawCusps = function (b) {
        var c = null == b ? this.data.cusps : b;
        if (null != c)
          for (
            var d,
              e,
              f,
              g = this.universe,
              h = a.utils.getEmptyWrapper(
                g,
                a._paperElementId + "-" + a.ID_TRANSIT + "-" + a.ID_CUSPS
              ),
              i =
                this.radius +
                (this.radius / a.INNER_CIRCLE_RADIUS_RATIO - this.rulerRadius) /
                  2,
              j = 0,
              k = c.length;
            k > j;
            j++
          ) {
            var d = (bottomPosition = a.utils.getPointPosition(
                this.cx,
                this.cy,
                this.radius,
                c[j] + this.shift
              )),
              e = a.utils.getPointPosition(
                this.cx,
                this.cy,
                this.radius +
                  this.radius / a.INNER_CIRCLE_RADIUS_RATIO -
                  this.rulerRadius,
                c[j] + this.shift
              ),
              f = this.paper.line(d.x, d.y, e.x, e.y);
            f.setAttribute("stroke", a.LINE_COLOR),
              f.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
              h.appendChild(f);
            var l = a.utils.radiansToDegree(2 * Math.PI),
              m = c[j],
              n = c[(j + 1) % 12],
              o = n - m > 0 ? n - m : n - m + l,
              p = a.utils.getPointPosition(
                this.cx,
                this.cy,
                i,
                ((m + o / 2) % l) + this.shift
              );
            h.appendChild(this.paper.getSymbol((j + 1).toString(), p.x, p.y));
          }
      }),
      (a.Transit.prototype.drawRuler = function () {
        var b = this.universe,
          c = a.utils.getEmptyWrapper(
            b,
            a._paperElementId + "-" + a.ID_TRANSIT + "-" + a.ID_RULER
          ),
          d = this.radius + this.radius / a.INNER_CIRCLE_RADIUS_RATIO,
          e = a.utils.getRulerPositions(
            this.cx,
            this.cy,
            d,
            d - this.rulerRadius,
            this.shift
          );
        e.forEach(function (b) {
          var d = this.paper.line(b.startX, b.startY, b.endX, b.endY);
          d.setAttribute("stroke", a.CIRCLE_COLOR),
            d.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
            c.appendChild(d);
        }, this);
        var f;
        (f = this.paper.circle(this.cx, this.cy, d - this.rulerRadius)),
          f.setAttribute("stroke", a.CIRCLE_COLOR),
          f.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
          c.appendChild(f);
      }),
      (a.Transit.prototype.aspects = function (c) {
        for (
          var d =
              null != c && Array.isArray(c)
                ? c
                : new a.AspectCalculator(this.toPoints).radix(
                    this.data.planets
                  ),
            e = this.universe,
            f = a.utils.getEmptyWrapper(
              e,
              a._paperElementId + "-" + a.ID_ASPECTS
            ),
            g = 0,
            h = d.length;
          h > g;
          g++
        ) {
          var i = a.utils.getPointPosition(
              this.cx,
              this.cy,
              this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
              d[g].toPoint.position + this.shift
            ),
            j = a.utils.getPointPosition(
              this.cx,
              this.cy,
              this.radius / a.INDOOR_CIRCLE_RADIUS_RATIO,
              d[g].point.position + this.shift
            ),
            k = this.paper.line(i.x, i.y, j.x, j.y);
          k.setAttribute(
            "stroke",
            a.STROKE_ONLY ? a.LINE_COLOR : d[g].aspect.color
          ),
            k.setAttribute("stroke-width", a.CUSPS_STROKE * a.SYMBOL_SCALE),
            k.setAttribute("data-name", d[g].aspect.name),
            k.setAttribute("data-degree", d[g].aspect.degree),
            k.setAttribute("data-point", d[g].point.name),
            k.setAttribute("data-toPoint", d[g].toPoint.name),
            k.setAttribute("data-precision", d[g].precision),
            f.appendChild(k);
        }
        return b;
      }),
      (a.Transit.prototype.animate = function (c, d, e, f) {
        var g = a.utils.validate(c);
        if (g.hasError) throw new Error(g.messages);
        a.utils.getEmptyWrapper(
          this.universe,
          a._paperElementId + "-" + a.ID_ASPECTS
        );
        var h = new a.Animator(b);
        return (
          h.animate(
            c,
            d,
            e,
            function () {
              (this.data = c),
                this.drawPoints(),
                this.drawCusps(),
                this.aspects(),
                "function" == typeof f && f();
            }.bind(this)
          ),
          b
        );
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    function b(b, c, d) {
      var e = !1,
        f = Math.abs(b - c);
      f > a.utils.radiansToDegree(Math.PI) &&
        (f = a.utils.radiansToDegree(2 * Math.PI) - f);
      var g = d.degree - d.orbit / 2,
        h = d.degree + d.orbit / 2;
      return f >= g && h >= f && (e = !0), e;
    }
    function c(b, c, d) {
      var e = Math.abs(b - c);
      return (
        e > a.utils.radiansToDegree(Math.PI) &&
          (e = a.utils.radiansToDegree(2 * Math.PI) - e),
        Math.abs(e - d)
      );
    }
    function d(b, c, d) {
      d - c > 0
        ? d - c > a.utils.radiansToDegree(Math.PI)
          ? (d = (d + b) % a.utils.radiansToDegree(2 * Math.PI))
          : (c = (c + b) % a.utils.radiansToDegree(2 * Math.PI))
        : c - d > a.utils.radiansToDegree(Math.PI)
        ? (c = (c + b) % a.utils.radiansToDegree(2 * Math.PI))
        : (d = (d + b) % a.utils.radiansToDegree(2 * Math.PI));
      var e = d,
        f = c,
        g = e - f;
      return (
        Math.abs(g) > a.utils.radiansToDegree(Math.PI) && ((e = c), (f = d)),
        0 > e - f
      );
    }
    function e(a, b) {
      return a.precision - b.precision;
    }
    var f;
    (a.AspectCalculator = function (b, c) {
      if (null == b) throw new Error("Param 'toPoint' must not be empty.");
      return (
        (this.settings = c || {}),
        (this.settings.aspects = (c && c.aspects) || a.ASPECTS),
        (this.toPoints = b),
        (f = this),
        this
      );
    }),
      (a.AspectCalculator.prototype.getToPoints = function () {
        return this["this"].toPoints;
      }),
      (a.AspectCalculator.prototype.radix = function (a) {
        if (!a) return [];
        var d = [];
        for (var f in a)
          if (a.hasOwnProperty(f))
            for (var g in this.toPoints)
              if (this.toPoints.hasOwnProperty(g) && f != g)
                for (var h in this.settings.aspects)
                  b(a[f][0], this.toPoints[g][0], this.settings.aspects[h]) &&
                    d.push({
                      aspect: {
                        name: h,
                        degree: this.settings.aspects[h].degree,
                        orbit: this.settings.aspects[h].orbit,
                        color: this.settings.aspects[h].color,
                      },
                      point: { name: f, position: a[f][0] },
                      toPoint: { name: g, position: this.toPoints[g][0] },
                      precision: c(
                        a[f][0],
                        this.toPoints[g][0],
                        this.settings.aspects[h].degree
                      ).toFixed(4),
                    });
        return d.sort(e);
      }),
      (a.AspectCalculator.prototype.transit = function (a) {
        if (!a) return [];
        var f = [];
        for (var g in a)
          if (a.hasOwnProperty(g))
            for (var h in this.toPoints)
              if (this.toPoints.hasOwnProperty(h))
                for (var i in this.settings.aspects)
                  if (
                    b(a[g][0], this.toPoints[h][0], this.settings.aspects[i])
                  ) {
                    var j = c(
                      a[g][0],
                      this.toPoints[h][0],
                      this.settings.aspects[i].degree
                    );
                    d(
                      this.settings.aspects[i].degree,
                      this.toPoints[h][0],
                      a[g][0]
                    ) && (j *= -1),
                      a[g][1] && a[g][1] < 0 && (j *= -1),
                      f.push({
                        aspect: {
                          name: i,
                          degree: this.settings.aspects[i].degree,
                          orbit: this.settings.aspects[i].orbit,
                          color: this.settings.aspects[i].color,
                        },
                        point: { name: g, position: a[g][0] },
                        toPoint: { name: h, position: this.toPoints[h][0] },
                        precision: j.toFixed(4),
                      });
                  }
        return f.sort(e);
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    function b(b, c, d) {
      var e = !1,
        f =
          0 > c - d / 2
            ? a.utils.radiansToDegree(2 * Math.PI) - (c - d / 2)
            : c - d / 2,
        g =
          c + d / 2 >= a.utils.radiansToDegree(2 * Math.PI)
            ? c + d / 2 - a.utils.radiansToDegree(2 * Math.PI)
            : c + d / 2;
      return (
        f > g ? f >= b && f >= b && (e = !0) : b >= f && g >= b && (e = !0), e
      );
    }
    var c = 1,
      d = 2,
      e = 3,
      f = 4,
      g = 5,
      h = 6,
      i = 7,
      j = 8,
      k = 9,
      l = 10,
      m = 11,
      n = 12;
    (a.Zodiac = function (a, b) {
      if (null == a) throw new Error("Param 'cusps' must not be empty.");
      if (!Array.isArray(a) || 12 != a.length)
        throw new Error("Param 'cusps' is not 12 length Array.");
      return (this.cusps = a), (this.settings = b || {}), this;
    }),
      (a.Zodiac.prototype.getSign = function (b) {
        var c = b % a.utils.radiansToDegree(2 * Math.PI);
        return Math.floor(c / 30 + 1);
      }),
      (a.Zodiac.prototype.isRetrograde = function (a) {
        return 0 > a;
      }),
      (a.Zodiac.prototype.getHouseNumber = function (b) {
        for (
          var c = b % a.utils.radiansToDegree(2 * Math.PI),
            d = 0,
            e = this.cusps.length;
          e > d;
          d++
        )
          if (c >= this.cusps[d] && c < this.cusps[(d % (e - 1)) + 1])
            return d + 1;
        for (var d = 0, e = this.cusps.length; e > d; d++)
          if (this.cusps[d] > this.cusps[(d % (e - 1)) + 1]) return d + 1;
        throw new Error(
          "Oops, serious error in the method: 'astrology.Zodiac.getHouseNumber'."
        );
      }),
      (a.Zodiac.prototype.getDignities = function (o, p) {
        if (!o || !o.name || null == o.position) return [];
        var q = [],
          r = this.getSign(o.position);
        o.position % a.utils.radiansToDegree(2 * Math.PI);
        switch (o.name) {
          case a.SYMBOL_SUN:
            r == g
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == m && q.push(a.DIGNITIES_DETRIMENT),
              r == c
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == h && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_MOON:
            r == f
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == l && q.push(a.DIGNITIES_DETRIMENT),
              r == d
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == j && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_MERCURY:
            r == e
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == k && q.push(a.DIGNITIES_DETRIMENT),
              r == h
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == n && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_VENUS:
            r == d || r == i
              ? q.push(a.DIGNITIES_RULERSHIP)
              : (r == c || r == j) && q.push(a.DIGNITIES_DETRIMENT),
              r == n
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == h && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_MARS:
            r == c || r == j
              ? q.push(a.DIGNITIES_RULERSHIP)
              : (r == d || r == i) && q.push(a.DIGNITIES_DETRIMENT),
              r == l
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == f && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_JUPITER:
            r == k || r == n
              ? q.push(a.DIGNITIES_RULERSHIP)
              : (r == e || r == h) && q.push(a.DIGNITIES_DETRIMENT),
              r == f
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == l && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_SATURN:
            r == l || r == m
              ? q.push(a.DIGNITIES_RULERSHIP)
              : (r == f || r == g) && q.push(a.DIGNITIES_DETRIMENT),
              r == i
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == c && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_URANUS:
            r == m
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == g && q.push(a.DIGNITIES_DETRIMENT),
              r == j
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == d && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_NEPTUNE:
            r == n
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == h && q.push(a.DIGNITIES_DETRIMENT),
              r == g || r == k
                ? q.push(a.DIGNITIES_EXALTATION)
                : (r == m || r == e) && q.push(a.DIGNITIES_FALL);
            break;
          case a.SYMBOL_PLUTO:
            r == j
              ? q.push(a.DIGNITIES_RULERSHIP)
              : r == d && q.push(a.DIGNITIES_DETRIMENT),
              r == c
                ? q.push(a.DIGNITIES_EXALTATION)
                : r == i && q.push(a.DIGNITIES_FALL);
        }
        if (null != p && Array.isArray(p))
          for (var s = 0, t = p.length; t > s; s++)
            o.name == p[s].name &&
              b(o.position, p[s].position, p[s].orbit) &&
              q.push(a.DIGNITIES_EXACT_EXALTATION);
        return q;
      }),
      (a.Zodiac.prototype.toDMS = function (a) {
        a += 0.5 / 3600 / 1e4;
        var b = parseInt(a);
        a = 60 * (a - b);
        var c = parseInt(a);
        a = 60 * (a - c);
        var d = parseInt(a);
        return b + "° " + c + "' " + d;
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    (a.Timer = function (a) {
      if ("function" != typeof a)
        throw new Error("param 'callback' has to be a function.");
      return (
        (this.callback = a), (this.boundTick_ = this.tick.bind(this)), this
      );
    }),
      (a.Timer.prototype.start = function () {
        this.requestID_ ||
          ((this.lastGameLoopFrame = new Date().getTime()),
          this.tick(),
          a.DEBUG && console.log("[astrology.Timer] start"));
      }),
      (a.Timer.prototype.stop = function () {
        this.requestID_ &&
          (window.cancelAnimationFrame(this.requestID_),
          (this.requestID_ = void 0),
          a.DEBUG && console.log("[astrology.Timer] stop"));
      }),
      (a.Timer.prototype.isRunning = function () {
        return this.requestID_ ? !0 : !1;
      }),
      (a.Timer.prototype.tick = function () {
        var a = new Date().getTime();
        (this.requestID_ = window.requestAnimationFrame(this.boundTick_)),
          this.callback(a - this.lastGameLoopFrame),
          (this.lastGameLoopFrame = a);
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    function b(b) {
      var c = a.utils.radiansToDegree(2 * Math.PI),
        e = d.transit.data.cusps[0] - d.data.cusps[0];
      0 > e && (e += c),
        a.ANIMATION_CUSPS_ROTATION_SPEED > 0 &&
          (e += d.isReverse
            ? -1 * (a.ANIMATION_CUSPS_ROTATION_SPEED * c + c)
            : a.ANIMATION_CUSPS_ROTATION_SPEED * c);
      var f = d.isReverse ? d.rotation - e : e - d.rotation;
      0 > f && (f += c);
      var g = f / b;
      d.isReverse && (g *= -1),
        (d.rotation += g),
        d.cuspsElement.setAttribute(
          "transform",
          "rotate(" + d.rotation + " " + d.transit.cx + " " + d.transit.cy + ")"
        ),
        1 == b && d.cuspsElement.removeAttribute("transform");
    }
    function c(b) {
      for (var c in d.data.planets) {
        var e,
          f = d.actualPlanetPos[c][0],
          g = d.data.planets[c][0],
          h = null != d.actualPlanetPos[c][1] && d.actualPlanetPos[c][1] < 0;
        (e = d.isReverse && h ? g - f : d.isReverse || h ? f - g : g - f),
          0 > e && (e += a.utils.radiansToDegree(2 * Math.PI));
        var i = e / b;
        d.isReverse && (i *= -1), h && (i *= -1);
        var j = f + i;
        0 > j && (j += a.utils.radiansToDegree(2 * Math.PI)),
          (d.actualPlanetPos[c][0] = j);
      }
      d.transit.drawPoints(d.actualPlanetPos);
    }
    var d;
    (a.Animator = function (b) {
      (this.transit = b), (this.actualPlanetPos = {});
      for (var c in this.transit.data.planets)
        this.actualPlanetPos[c] = this.transit.data.planets[c];
      return (
        (this.timer = new a.Timer(this.update.bind(this))),
        (this.timeSinceLoopStart = 0),
        (d = this),
        this
      );
    }),
      (a.Animator.prototype.animate = function (b, c, d, e) {
        (this.data = b),
          (this.duration = 1e3 * c),
          (this.isReverse = d || !1),
          (this.callback = e),
          (this.rotation = 0),
          (this.cuspsElement = document.getElementById(
            a._paperElementId + "-" + a.ID_TRANSIT + "-" + a.ID_CUSPS
          )),
          this.timer.start();
      }),
      (a.Animator.prototype.update = function (a) {
        if (
          ((a = a || 1),
          (this.timeSinceLoopStart += a),
          this.timeSinceLoopStart >= this.duration)
        )
          return (
            this.timer.stop(),
            void ("function" == typeof this.callback && this.callback())
          );
        var d =
          this.duration - this.timeSinceLoopStart < a
            ? 1
            : Math.round((this.duration - this.timeSinceLoopStart) / a);
        c(d), b(d);
      });
  })((window.astrology = window.astrology || {})),
  (function (a) {
    (a.utils = {}),
      (a.utils.getPointPosition = function (b, c, d, e) {
        var f = ((a.SHIFT_IN_DEGREES - e) * Math.PI) / 180,
          g = b + d * Math.cos(f),
          h = c + d * Math.sin(f);
        return { x: g, y: h };
      }),
      (a.utils.degreeToRadians = function (a) {
        return (degrees * Math.PI) / 180;
      }),
      (a.utils.radiansToDegree = function (a) {
        return (180 * a) / Math.PI;
      }),
      (a.utils.getDescriptionPosition = function (b, c) {
        var d = 1.4,
          e = [],
          f = b.x + (a.COLLISION_RADIUS / d) * a.SYMBOL_SCALE,
          g = b.y - a.COLLISION_RADIUS * a.SYMBOL_SCALE;
        return (
          c.forEach(function (b, c) {
            e.push({
              text: b,
              x: f,
              y: g + (a.COLLISION_RADIUS / d) * a.SYMBOL_SCALE * c,
            });
          }, this),
          e
        );
      }),
      (a.utils.validate = function (a) {
        var b = { hasError: !1, messages: [] };
        if (null == a)
          return b.messages.push("Data is not set."), (b.hasError = !0), b;
        null == a.planets &&
          (b.messages.push("There is not property 'planets'."),
          (b.hasError = !0));
        for (var c in a.planets)
          a.planets.hasOwnProperty(c) &&
            (Array.isArray(a.planets[c]) ||
              (b.messages.push(
                "The planets property '" + c + "' has to be Array."
              ),
              (b.hasError = !0)));
        return (
          null == a.cusps ||
            Array.isArray(a.cusps) ||
            (b.messages.push("Property 'cusps' has to be Array."),
            (b.hasError = !0)),
          null != a.cusps &&
            12 != a.cusps.length &&
            (b.messages.push("Count of 'cusps' values has to be 12."),
            (b.hasError = !0)),
          b
        );
      }),
      (a.utils.getEmptyWrapper = function (b, c) {
        var d = document.getElementById(c);
        return (
          d
            ? a.utils.removeChilds(d)
            : ((d = document.createElementNS(
                document.getElementById(a._paperElementId).namespaceURI,
                "g"
              )),
              d.setAttribute("id", c),
              b.appendChild(d)),
          d
        );
      }),
      (a.utils.removeChilds = function (a) {
        if (null != a) for (var b; (b = a.lastChild); ) a.removeChild(b);
      }),
      (a.utils.isCollision = function (a, b) {
        var c = a.x - b.x,
          d = a.y - b.y,
          e = Math.sqrt(c * c + d * d),
          f = a.r + b.r;
        return f >= e;
      }),
      (a.utils.assemble = function (b, c, d) {
        if (0 == b.length) return b.push(c), b;
        if (
          2 * Math.PI * d.r -
            2 * (a.COLLISION_RADIUS * a.SYMBOL_SCALE) * (b.length + 2) <=
          0
        )
          throw (
            (a.DEBUG &&
              console.log(
                "Universe circumference: " +
                  2 * Math.PI * d.r +
                  ", Planets circumference: " +
                  2 * (a.COLLISION_RADIUS * a.SYMBOL_SCALE) * (b.length + 2)
              ),
            new Error(
              "Unresolved planet collision. Try change SYMBOL_SCALE or paper size."
            ))
          );
        var e = !1;
        b.sort(a.utils.comparePoints);
        for (var f = 0, g = b.length; g > f; f++)
          if (a.utils.isCollision(b[f], c)) {
            e = !0;
            var h = b[f];
            (h.index = f),
              a.DEBUG &&
                console.log("Resolve collision: " + h.name + " X " + c.name);
            break;
          }
        if (e) {
          a.utils.placePointsInCollision(h, c);
          var i = a.utils.getPointPosition(d.cx, d.cy, d.r, h.angle);
          (h.x = i.x),
            (h.y = i.y),
            (i = a.utils.getPointPosition(d.cx, d.cy, d.r, c.angle)),
            (c.x = i.x),
            (c.y = i.y),
            b.splice(h.index, 1),
            (b = a.utils.assemble(b, h, d)),
            (b = a.utils.assemble(b, c, d));
        } else b.push(c);
        return b;
      }),
      (a.utils.placePointsInCollision = function (b, c) {
        var d = 1;
        (b.pointer <= c.pointer &&
          Math.abs(b.pointer - c.pointer) <= a.COLLISION_RADIUS) ||
        (b.pointer >= c.pointer &&
          Math.abs(b.pointer - c.pointer) >= a.COLLISION_RADIUS)
          ? ((b.angle = b.angle - d), (c.angle = c.angle + d))
          : ((b.angle = b.angle + d), (c.angle = c.angle - d)),
          (b.angle = (b.angle + 360) % 360),
          (c.angle = (c.angle + 360) % 360);
      }),
      (a.utils.isInCollision = function (b, c) {
        for (
          var d = a.utils.radiansToDegree(2 * Math.PI),
            e = (a.COLLISION_RADIUS * a.SYMBOL_SCALE) / 2,
            f = !1,
            g = 0,
            h = c.length;
          h > g;
          g++
        )
          if (
            Math.abs(c[g].angle - b) <= e ||
            d - Math.abs(c[g].angle - b) <= e
          ) {
            f = !0;
            break;
          }
        return f;
      }),
      (a.utils.getDashedLinesPositions = function (b, c, d, e, f, g, h) {
        var i,
          j,
          k = [];
        return (
          a.utils.isInCollision(d, h)
            ? ((i = a.utils.getPointPosition(b, c, e, d)),
              (j = a.utils.getPointPosition(
                b,
                c,
                g - a.COLLISION_RADIUS * a.SYMBOL_SCALE,
                d
              )),
              k.push({ startX: i.x, startY: i.y, endX: j.x, endY: j.y }),
              g + 2 * (a.COLLISION_RADIUS * a.SYMBOL_SCALE) < f &&
                ((i = a.utils.getPointPosition(
                  b,
                  c,
                  g + 2 * (a.COLLISION_RADIUS * a.SYMBOL_SCALE),
                  d
                )),
                (j = a.utils.getPointPosition(b, c, f, d)),
                k.push({ startX: i.x, startY: i.y, endX: j.x, endY: j.y })))
            : ((i = a.utils.getPointPosition(b, c, e, d)),
              (j = a.utils.getPointPosition(b, c, f, d)),
              k.push({ startX: i.x, startY: i.y, endX: j.x, endY: j.y })),
          k
        );
      }),
      (a.utils.getRulerPositions = function (b, c, d, e, f) {
        for (
          var g = [],
            h = e,
            i = e >= d ? h - Math.abs(e - d) / 2 : h + Math.abs(e - d) / 2,
            j = 0,
            k = 0,
            l = 5;
          72 > j;
          j++
        ) {
          var m = k + f,
            n = a.utils.getPointPosition(b, c, d, m),
            o = a.utils.getPointPosition(b, c, j % 2 == 0 ? h : i, m);
          g.push({ startX: n.x, startY: n.y, endX: o.x, endY: o.y }), (k += l);
        }
        return g;
      }),
      (a.utils.comparePoints = function (a, b) {
        return a.angle - b.angle;
      });
  })((window.astrology = window.astrology || {}));
